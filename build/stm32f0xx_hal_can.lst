ARM GAS  /tmp/ccr0EAiD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f0xx_hal_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  20              		.align	2
  21              		.weak	HAL_CAN_MspInit
  22              		.code	16
  23              		.thumb_func
  25              	HAL_CAN_MspInit:
  26              	.LFB104:
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              		@ sp needed
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE104:
  36 0002 C046     		.section	.text.HAL_CAN_Init,"ax",%progbits
  37              		.align	2
  38              		.global	HAL_CAN_Init
  39              		.code	16
  40              		.thumb_func
  42              	HAL_CAN_Init:
  43              	.LFB40:
  44              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @file    stm32f0xx_hal_can.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
ARM GAS  /tmp/ccr0EAiD.s 			page 2


  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           functions:
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           messages.
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           can be used:
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  message.
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  message.
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       ==============================
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 3


  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       ================================
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           here.
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       ==================
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           be completed.
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *** Callback registration ***
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   =============================================
ARM GAS  /tmp/ccr0EAiD.s 			page 4


 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   Use Function @ref HAL_CAN_RegisterCallback() to register an interrupt callback.
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   Function @ref HAL_CAN_RegisterCallback() allows to register following callbacks:
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   and a pointer to the user callback function.
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   Use function @ref HAL_CAN_UnRegisterCallback() to reset a callback to the default
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   weak function.
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   @ref HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   and the Callback ID.
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   This function allows to reset following callbacks:
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   By default, after the @ref HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   example @ref HAL_CAN_ErrorCallback().
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   reset to the legacy weak function in the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit() only when
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit()
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
ARM GAS  /tmp/ccr0EAiD.s 			page 5


 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   using @ref HAL_CAN_RegisterCallback() before calling @ref HAL_CAN_DeInit()
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   or @ref HAL_CAN_Init() function.
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   are set to the corresponding weak functions.
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   @endverbatim
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ******************************************************************************
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @attention
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * All rights reserved.</center></h2>
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * the "License"; You may not use this file except in compliance with the
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * License. You may obtain a copy of the License at:
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *                        opensource.org/licenses/BSD-3-Clause
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ******************************************************************************
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #include "stm32f0xx_hal.h"
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @addtogroup STM32F0xx_HAL_Driver
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if defined(CAN)
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN CAN
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief CAN driver modules
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @}
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
ARM GAS  /tmp/ccr0EAiD.s 			page 6


 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @verbatim
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]  This section provides functions allowing to:
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @endverbatim
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
  45              		.loc 1 275 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              	.LVL0:
  50              		.loc 1 275 0
  51 0000 70B5     		push	{r4, r5, r6, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 16
  54              		.cfi_offset 4, -16
  55              		.cfi_offset 5, -12
  56              		.cfi_offset 6, -8
  57              		.cfi_offset 14, -4
  58              		.loc 1 275 0
  59 0002 041E     		subs	r4, r0, #0
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check CAN handle */
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan == NULL)
  60              		.loc 1 279 0
  61 0004 00D1     		bne	.LCB25
  62 0006 76E0     		b	.L21	@long jump
  63              	.LCB25:
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
ARM GAS  /tmp/ccr0EAiD.s 			page 7


 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check the parameters */
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
  64              		.loc 1 326 0
  65 0008 2023     		movs	r3, #32
  66 000a C35C     		ldrb	r3, [r0, r3]
  67 000c 002B     		cmp	r3, #0
  68 000e 6AD0     		beq	.L26
  69              	.LVL1:
  70              	.L4:
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 8


 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Exit from sleep mode */
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
  71              		.loc 1 334 0
  72 0010 0221     		movs	r1, #2
  73 0012 2268     		ldr	r2, [r4]
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Get tick */
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   tickstart = HAL_GetTick();
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
  74              		.loc 1 340 0
  75 0014 0225     		movs	r5, #2
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  76              		.loc 1 334 0
  77 0016 1368     		ldr	r3, [r2]
  78 0018 8B43     		bics	r3, r1
  79 001a 1360     		str	r3, [r2]
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
  80              		.loc 1 337 0
  81 001c FFF7FEFF 		bl	HAL_GetTick
  82              	.LVL2:
  83 0020 0600     		movs	r6, r0
  84              	.LVL3:
  85              		.loc 1 340 0
  86 0022 04E0     		b	.L5
  87              	.LVL4:
  88              	.L6:
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
  89              		.loc 1 342 0
  90 0024 FFF7FEFF 		bl	HAL_GetTick
  91              	.LVL5:
  92 0028 801B     		subs	r0, r0, r6
  93 002a 0A28     		cmp	r0, #10
  94 002c 51D8     		bhi	.L24
  95              	.L5:
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
  96              		.loc 1 340 0
  97 002e 2368     		ldr	r3, [r4]
  98 0030 5A68     		ldr	r2, [r3, #4]
  99 0032 1542     		tst	r5, r2
 100 0034 F6D1     		bne	.L6
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Update error code */
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Change CAN state */
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       return HAL_ERROR;
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Request initialisation */
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 101              		.loc 1 355 0
ARM GAS  /tmp/ccr0EAiD.s 			page 9


 102 0036 0122     		movs	r2, #1
 103 0038 1968     		ldr	r1, [r3]
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Get tick */
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   tickstart = HAL_GetTick();
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Wait initialisation acknowledge */
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 104              		.loc 1 361 0
 105 003a 0125     		movs	r5, #1
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 106              		.loc 1 355 0
 107 003c 0A43     		orrs	r2, r1
 108 003e 1A60     		str	r2, [r3]
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 109              		.loc 1 358 0
 110 0040 FFF7FEFF 		bl	HAL_GetTick
 111              	.LVL6:
 112 0044 0600     		movs	r6, r0
 113              	.LVL7:
 114              		.loc 1 361 0
 115 0046 04E0     		b	.L7
 116              	.LVL8:
 117              	.L8:
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 118              		.loc 1 363 0
 119 0048 FFF7FEFF 		bl	HAL_GetTick
 120              	.LVL9:
 121 004c 801B     		subs	r0, r0, r6
 122 004e 0A28     		cmp	r0, #10
 123 0050 3FD8     		bhi	.L24
 124              	.L7:
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 125              		.loc 1 361 0
 126 0052 2368     		ldr	r3, [r4]
 127 0054 5A68     		ldr	r2, [r3, #4]
 128 0056 1542     		tst	r5, r2
 129 0058 F6D0     		beq	.L8
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Update error code */
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Change CAN state */
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       return HAL_ERROR;
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the time triggered communication mode */
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 130              		.loc 1 376 0
 131 005a 227E     		ldrb	r2, [r4, #24]
 132 005c 012A     		cmp	r2, #1
 133 005e 45D0     		beq	.L27
 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
ARM GAS  /tmp/ccr0EAiD.s 			page 10


 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 134              		.loc 1 382 0
 135 0060 8021     		movs	r1, #128
 136 0062 1A68     		ldr	r2, [r3]
 137 0064 8A43     		bics	r2, r1
 138 0066 1A60     		str	r2, [r3]
 139              	.L10:
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 140              		.loc 1 386 0
 141 0068 627E     		ldrb	r2, [r4, #25]
 142 006a 012A     		cmp	r2, #1
 143 006c 59D0     		beq	.L28
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 144              		.loc 1 392 0
 145 006e 4021     		movs	r1, #64
 146 0070 1A68     		ldr	r2, [r3]
 147 0072 8A43     		bics	r2, r1
 148 0074 1A60     		str	r2, [r3]
 149              	.L12:
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 150              		.loc 1 396 0
 151 0076 A27E     		ldrb	r2, [r4, #26]
 152 0078 012A     		cmp	r2, #1
 153 007a 4DD0     		beq	.L29
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 154              		.loc 1 402 0
 155 007c 2021     		movs	r1, #32
 156 007e 1A68     		ldr	r2, [r3]
 157 0080 8A43     		bics	r2, r1
 158 0082 1A60     		str	r2, [r3]
 159              	.L14:
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the automatic retransmission */
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 160              		.loc 1 406 0
 161 0084 E27E     		ldrb	r2, [r4, #27]
ARM GAS  /tmp/ccr0EAiD.s 			page 11


 162 0086 012A     		cmp	r2, #1
 163 0088 41D0     		beq	.L30
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 164              		.loc 1 412 0
 165 008a 1022     		movs	r2, #16
 166 008c 1968     		ldr	r1, [r3]
 167 008e 0A43     		orrs	r2, r1
 168 0090 1A60     		str	r2, [r3]
 169              	.L16:
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 170              		.loc 1 416 0
 171 0092 227F     		ldrb	r2, [r4, #28]
 172 0094 012A     		cmp	r2, #1
 173 0096 35D0     		beq	.L31
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 174              		.loc 1 422 0
 175 0098 0821     		movs	r1, #8
 176 009a 1A68     		ldr	r2, [r3]
 177 009c 8A43     		bics	r2, r1
 178 009e 1A60     		str	r2, [r3]
 179              	.L18:
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 180              		.loc 1 426 0
 181 00a0 627F     		ldrb	r2, [r4, #29]
 182 00a2 012A     		cmp	r2, #1
 183 00a4 29D0     		beq	.L32
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 184              		.loc 1 432 0
 185 00a6 0421     		movs	r1, #4
 186 00a8 1A68     		ldr	r2, [r3]
 187 00aa 8A43     		bics	r2, r1
 188 00ac 1A60     		str	r2, [r3]
 189              	.L20:
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Set the bit timing register */
ARM GAS  /tmp/ccr0EAiD.s 			page 12


 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 190              		.loc 1 436 0
 191 00ae E168     		ldr	r1, [r4, #12]
 192 00b0 A268     		ldr	r2, [r4, #8]
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Initialize the error code */
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Initialize the CAN state */
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return function status */
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return HAL_OK;
 193              		.loc 1 449 0
 194 00b2 0020     		movs	r0, #0
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 195              		.loc 1 436 0
 196 00b4 0A43     		orrs	r2, r1
 197 00b6 2169     		ldr	r1, [r4, #16]
 198 00b8 0A43     		orrs	r2, r1
 199 00ba 6169     		ldr	r1, [r4, #20]
 200 00bc 0A43     		orrs	r2, r1
 201 00be 6168     		ldr	r1, [r4, #4]
 202 00c0 0139     		subs	r1, r1, #1
 203 00c2 0A43     		orrs	r2, r1
 204 00c4 DA61     		str	r2, [r3, #28]
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 205              		.loc 1 443 0
 206 00c6 0023     		movs	r3, #0
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 207              		.loc 1 446 0
 208 00c8 0122     		movs	r2, #1
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 209              		.loc 1 443 0
 210 00ca 6362     		str	r3, [r4, #36]
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 211              		.loc 1 446 0
 212 00cc 2033     		adds	r3, r3, #32
 213 00ce E254     		strb	r2, [r4, r3]
 214              		.loc 1 449 0
 215 00d0 08E0     		b	.L3
 216              	.L24:
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 217              		.loc 1 366 0
 218 00d2 8022     		movs	r2, #128
 219 00d4 636A     		ldr	r3, [r4, #36]
 220 00d6 9202     		lsls	r2, r2, #10
 221 00d8 1343     		orrs	r3, r2
 222 00da 6362     		str	r3, [r4, #36]
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 223              		.loc 1 369 0
 224 00dc 0522     		movs	r2, #5
 225 00de 2023     		movs	r3, #32
ARM GAS  /tmp/ccr0EAiD.s 			page 13


 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 226              		.loc 1 371 0
 227 00e0 0120     		movs	r0, #1
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 228              		.loc 1 369 0
 229 00e2 E254     		strb	r2, [r4, r3]
 230              	.LVL10:
 231              	.L3:
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 232              		.loc 1 450 0
 233              		@ sp needed
 234              	.LVL11:
 235 00e4 70BD     		pop	{r4, r5, r6, pc}
 236              	.LVL12:
 237              	.L26:
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 238              		.loc 1 329 0
 239 00e6 FFF7FEFF 		bl	HAL_CAN_MspInit
 240              	.LVL13:
 241 00ea 91E7     		b	.L4
 242              	.LVL14:
 243              	.L27:
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 244              		.loc 1 378 0
 245 00ec 1968     		ldr	r1, [r3]
 246 00ee 7F32     		adds	r2, r2, #127
 247 00f0 0A43     		orrs	r2, r1
 248 00f2 1A60     		str	r2, [r3]
 249 00f4 B8E7     		b	.L10
 250              	.LVL15:
 251              	.L21:
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 252              		.loc 1 281 0
 253 00f6 0120     		movs	r0, #1
 254              	.LVL16:
 255 00f8 F4E7     		b	.L3
 256              	.LVL17:
 257              	.L32:
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 258              		.loc 1 428 0
 259 00fa 1968     		ldr	r1, [r3]
 260 00fc 0332     		adds	r2, r2, #3
 261 00fe 0A43     		orrs	r2, r1
 262 0100 1A60     		str	r2, [r3]
 263 0102 D4E7     		b	.L20
 264              	.L31:
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 265              		.loc 1 418 0
 266 0104 1968     		ldr	r1, [r3]
 267 0106 0732     		adds	r2, r2, #7
 268 0108 0A43     		orrs	r2, r1
 269 010a 1A60     		str	r2, [r3]
 270 010c C8E7     		b	.L18
 271              	.L30:
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 272              		.loc 1 408 0
 273 010e 1021     		movs	r1, #16
ARM GAS  /tmp/ccr0EAiD.s 			page 14


 274 0110 1A68     		ldr	r2, [r3]
 275 0112 8A43     		bics	r2, r1
 276 0114 1A60     		str	r2, [r3]
 277 0116 BCE7     		b	.L16
 278              	.L29:
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 279              		.loc 1 398 0
 280 0118 1968     		ldr	r1, [r3]
 281 011a 1F32     		adds	r2, r2, #31
 282 011c 0A43     		orrs	r2, r1
 283 011e 1A60     		str	r2, [r3]
 284 0120 B0E7     		b	.L14
 285              	.L28:
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 286              		.loc 1 388 0
 287 0122 1968     		ldr	r1, [r3]
 288 0124 3F32     		adds	r2, r2, #63
 289 0126 0A43     		orrs	r2, r1
 290 0128 1A60     		str	r2, [r3]
 291 012a A4E7     		b	.L12
 292              		.cfi_endproc
 293              	.LFE40:
 295              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 296              		.align	2
 297              		.weak	HAL_CAN_MspDeInit
 298              		.code	16
 299              		.thumb_func
 301              	HAL_CAN_MspDeInit:
 302              	.LFB102:
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307              		@ sp needed
 308 0000 7047     		bx	lr
 309              		.cfi_endproc
 310              	.LFE102:
 312 0002 C046     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 313              		.align	2
 314              		.global	HAL_CAN_ConfigFilter
 315              		.code	16
 316              		.thumb_func
 318              	HAL_CAN_ConfigFilter:
 319              	.LFB44:
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         reset values.
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check CAN handle */
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan == NULL)
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
ARM GAS  /tmp/ccr0EAiD.s 			page 15


 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check the parameters */
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Stop the CAN module */
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Reset the CAN peripheral */
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Change CAN state */
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return function status */
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return HAL_OK;
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
ARM GAS  /tmp/ccr0EAiD.s 			page 16


 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for CAN module
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (pCallback == NULL)
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update the error code */
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     switch (CallbackID)
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 17


 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       default :
ARM GAS  /tmp/ccr0EAiD.s 			page 18


 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update the error code */
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Return error status */
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         status =  HAL_ERROR;
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     switch (CallbackID)
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       default :
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update the error code */
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Return error status */
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         status =  HAL_ERROR;
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update the error code */
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return error status */
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     status =  HAL_ERROR;
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return status;
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         CAN callabck is redirected to the weak predefined callback
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for CAN module
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be one of the following values:
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
ARM GAS  /tmp/ccr0EAiD.s 			page 19


 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     switch (CallbackID)
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
ARM GAS  /tmp/ccr0EAiD.s 			page 20


 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       default :
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update the error code */
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Return error status */
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         status =  HAL_ERROR;
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     switch (CallbackID)
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       default :
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update the error code */
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Return error status */
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         status =  HAL_ERROR;
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         break;
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update the error code */
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return error status */
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     status =  HAL_ERROR;
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
ARM GAS  /tmp/ccr0EAiD.s 			page 21


 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return status;
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @}
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *  @brief    Configuration functions.
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @verbatim
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****               ##### Configuration functions #####
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]  This section provides functions allowing to:
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @endverbatim
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         contains the filter configuration information.
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 320              		.loc 1 839 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LVL18:
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t filternbrbitpos;
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 325              		.loc 1 842 0
 326 0000 2023     		movs	r3, #32
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t filternbrbitpos;
 327              		.loc 1 839 0
 328 0002 70B5     		push	{r4, r5, r6, lr}
 329              	.LCFI1:
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 4, -16
 332              		.cfi_offset 5, -12
 333              		.cfi_offset 6, -8
 334              		.cfi_offset 14, -4
 335              		.loc 1 842 0
 336 0004 C35C     		ldrb	r3, [r0, r3]
 337              	.LVL19:
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 22


 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 338              		.loc 1 844 0
 339 0006 013B     		subs	r3, r3, #1
 340              	.LVL20:
 341 0008 012B     		cmp	r3, #1
 342 000a 06D9     		bls	.L44
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check the parameters */
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* CAN is single instance with 14 dedicated filters banks */
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check the parameters */
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Initialisation mode for the filter */
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Convert filter number into bit position */
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Filter Deactivation */
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Filter Scale */
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* 16-bit scale for the filter */
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* 32-bit scale for the filter */
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
ARM GAS  /tmp/ccr0EAiD.s 			page 23


 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Filter Mode */
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Identifier list mode for the filter*/
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Filter FIFO assignment */
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Filter activation */
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 343              		.loc 1 945 0
 344 000c 8022     		movs	r2, #128
 345 000e 436A     		ldr	r3, [r0, #36]
 346 0010 D202     		lsls	r2, r2, #11
 347 0012 1343     		orrs	r3, r2
 348 0014 4362     		str	r3, [r0, #36]
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 24


 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 349              		.loc 1 947 0
 350 0016 0120     		movs	r0, #1
 351              	.LVL21:
 352              	.L43:
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 353              		.loc 1 949 0
 354              		@ sp needed
 355 0018 70BD     		pop	{r4, r5, r6, pc}
 356              	.LVL22:
 357              	.L44:
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 358              		.loc 1 841 0
 359 001a 0368     		ldr	r3, [r0]
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 360              		.loc 1 863 0
 361 001c 8020     		movs	r0, #128
 362              	.LVL23:
 363 001e 0124     		movs	r4, #1
 364 0020 8000     		lsls	r0, r0, #2
 365 0022 1A58     		ldr	r2, [r3, r0]
 366 0024 2243     		orrs	r2, r4
 367 0026 1A50     		str	r2, [r3, r0]
 368              	.LVL24:
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 369              		.loc 1 866 0
 370 0028 4A69     		ldr	r2, [r1, #20]
 371 002a E238     		subs	r0, r0, #226
 372 002c FF38     		subs	r0, r0, #255
 373 002e 1040     		ands	r0, r2
 374 0030 8440     		lsls	r4, r4, r0
 375 0032 2500     		movs	r5, r4
 376              	.LVL25:
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 377              		.loc 1 869 0
 378 0034 8724     		movs	r4, #135
 379              	.LVL26:
 380 0036 EE43     		mvns	r6, r5
 381 0038 A400     		lsls	r4, r4, #2
 382 003a 1859     		ldr	r0, [r3, r4]
 383 003c 3040     		ands	r0, r6
 384 003e 1851     		str	r0, [r3, r4]
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 385              		.loc 1 872 0
 386 0040 C869     		ldr	r0, [r1, #28]
 387 0042 0028     		cmp	r0, #0
 388 0044 36D0     		beq	.L45
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 389              		.loc 1 890 0
 390 0046 0128     		cmp	r0, #1
 391 0048 14D1     		bne	.L37
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 392              		.loc 1 893 0
 393 004a 8324     		movs	r4, #131
 394 004c A400     		lsls	r4, r4, #2
 395 004e 1859     		ldr	r0, [r3, r4]
ARM GAS  /tmp/ccr0EAiD.s 			page 25


 396 0050 2843     		orrs	r0, r5
 397 0052 1851     		str	r0, [r3, r4]
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 398              		.loc 1 897 0
 399 0054 0868     		ldr	r0, [r1]
 400 0056 0404     		lsls	r4, r0, #16
 401 0058 8888     		ldrh	r0, [r1, #4]
 402 005a 0443     		orrs	r4, r0
 403 005c D000     		lsls	r0, r2, #3
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 404              		.loc 1 896 0
 405 005e 9022     		movs	r2, #144
 406 0060 1818     		adds	r0, r3, r0
 407 0062 9200     		lsls	r2, r2, #2
 408 0064 8450     		str	r4, [r0, r2]
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 409              		.loc 1 902 0
 410 0066 8A68     		ldr	r2, [r1, #8]
 411 0068 1404     		lsls	r4, r2, #16
 412 006a 8A89     		ldrh	r2, [r1, #12]
 413 006c 2243     		orrs	r2, r4
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 414              		.loc 1 901 0
 415 006e 9124     		movs	r4, #145
 416 0070 A400     		lsls	r4, r4, #2
 417 0072 0251     		str	r2, [r0, r4]
 418              	.L37:
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 419              		.loc 1 910 0
 420 0074 8120     		movs	r0, #129
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 421              		.loc 1 907 0
 422 0076 8A69     		ldr	r2, [r1, #24]
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 423              		.loc 1 910 0
 424 0078 8000     		lsls	r0, r0, #2
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 425              		.loc 1 907 0
 426 007a 002A     		cmp	r2, #0
 427 007c 33D1     		bne	.L38
 428              	.L46:
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 429              		.loc 1 910 0
 430 007e 1A58     		ldr	r2, [r3, r0]
 431 0080 3240     		ands	r2, r6
 432 0082 1A50     		str	r2, [r3, r0]
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 433              		.loc 1 922 0
 434 0084 8520     		movs	r0, #133
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 435              		.loc 1 919 0
 436 0086 0A69     		ldr	r2, [r1, #16]
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 437              		.loc 1 922 0
 438 0088 8000     		lsls	r0, r0, #2
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 439              		.loc 1 919 0
ARM GAS  /tmp/ccr0EAiD.s 			page 26


 440 008a 002A     		cmp	r2, #0
 441 008c 33D1     		bne	.L40
 442              	.L47:
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 443              		.loc 1 922 0
 444 008e 1A58     		ldr	r2, [r3, r0]
 445 0090 3240     		ands	r2, r6
 446 0092 1A50     		str	r2, [r3, r0]
 447              	.L41:
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 448              		.loc 1 931 0
 449 0094 0A6A     		ldr	r2, [r1, #32]
 450 0096 012A     		cmp	r2, #1
 451 0098 04D1     		bne	.L42
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 452              		.loc 1 933 0
 453 009a 8722     		movs	r2, #135
 454 009c 9200     		lsls	r2, r2, #2
 455 009e 9C58     		ldr	r4, [r3, r2]
 456 00a0 2C43     		orrs	r4, r5
 457 00a2 9C50     		str	r4, [r3, r2]
 458              	.L42:
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 459              		.loc 1 937 0
 460 00a4 8021     		movs	r1, #128
 461              	.LVL27:
 462 00a6 0120     		movs	r0, #1
 463 00a8 8900     		lsls	r1, r1, #2
 464 00aa 5A58     		ldr	r2, [r3, r1]
 465 00ac 8243     		bics	r2, r0
 466 00ae 5A50     		str	r2, [r3, r1]
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 467              		.loc 1 940 0
 468 00b0 0020     		movs	r0, #0
 469 00b2 B1E7     		b	.L43
 470              	.LVL28:
 471              	.L45:
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 472              		.loc 1 875 0
 473 00b4 103C     		subs	r4, r4, #16
 474 00b6 1859     		ldr	r0, [r3, r4]
 475 00b8 3040     		ands	r0, r6
 476 00ba 1851     		str	r0, [r3, r4]
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 477              		.loc 1 880 0
 478 00bc C868     		ldr	r0, [r1, #12]
 479 00be 0404     		lsls	r4, r0, #16
 480 00c0 8888     		ldrh	r0, [r1, #4]
 481 00c2 0443     		orrs	r4, r0
 482 00c4 D000     		lsls	r0, r2, #3
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 483              		.loc 1 879 0
 484 00c6 9022     		movs	r2, #144
 485 00c8 1818     		adds	r0, r3, r0
 486 00ca 9200     		lsls	r2, r2, #2
 487 00cc 8450     		str	r4, [r0, r2]
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
ARM GAS  /tmp/ccr0EAiD.s 			page 27


 488              		.loc 1 886 0
 489 00ce 8A68     		ldr	r2, [r1, #8]
 490 00d0 1404     		lsls	r4, r2, #16
 491 00d2 0A88     		ldrh	r2, [r1]
 492 00d4 2243     		orrs	r2, r4
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 493              		.loc 1 885 0
 494 00d6 9124     		movs	r4, #145
 495 00d8 A400     		lsls	r4, r4, #2
 496 00da 0251     		str	r2, [r0, r4]
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 497              		.loc 1 910 0
 498 00dc 8120     		movs	r0, #129
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 499              		.loc 1 907 0
 500 00de 8A69     		ldr	r2, [r1, #24]
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 501              		.loc 1 910 0
 502 00e0 8000     		lsls	r0, r0, #2
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 503              		.loc 1 907 0
 504 00e2 002A     		cmp	r2, #0
 505 00e4 CBD0     		beq	.L46
 506              	.L38:
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 507              		.loc 1 915 0
 508 00e6 1A58     		ldr	r2, [r3, r0]
 509 00e8 2A43     		orrs	r2, r5
 510 00ea 1A50     		str	r2, [r3, r0]
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 511              		.loc 1 922 0
 512 00ec 8520     		movs	r0, #133
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 513              		.loc 1 919 0
 514 00ee 0A69     		ldr	r2, [r1, #16]
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 515              		.loc 1 922 0
 516 00f0 8000     		lsls	r0, r0, #2
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 517              		.loc 1 919 0
 518 00f2 002A     		cmp	r2, #0
 519 00f4 CBD0     		beq	.L47
 520              	.L40:
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 521              		.loc 1 927 0
 522 00f6 1A58     		ldr	r2, [r3, r0]
 523 00f8 2A43     		orrs	r2, r5
 524 00fa 1A50     		str	r2, [r3, r0]
 525 00fc CAE7     		b	.L41
 526              		.cfi_endproc
 527              	.LFE44:
 529 00fe C046     		.section	.text.HAL_CAN_Start,"ax",%progbits
 530              		.align	2
 531              		.global	HAL_CAN_Start
 532              		.code	16
 533              		.thumb_func
 535              	HAL_CAN_Start:
ARM GAS  /tmp/ccr0EAiD.s 			page 28


 536              	.LFB45:
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @}
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *  @brief    Control functions
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @verbatim
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                       ##### Control functions #####
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]  This section provides functions allowing to:
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                              and activate the corresponding
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                              transmission request
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                              pending on the selected Tx mailbox
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @endverbatim
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Start the CAN module.
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 537              		.loc 1 989 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL29:
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 542              		.loc 1 992 0
 543 0000 2022     		movs	r2, #32
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
 544              		.loc 1 989 0
 545 0002 70B5     		push	{r4, r5, r6, lr}
 546              	.LCFI2:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 4, -16
ARM GAS  /tmp/ccr0EAiD.s 			page 29


 549              		.cfi_offset 5, -12
 550              		.cfi_offset 6, -8
 551              		.cfi_offset 14, -4
 552              		.loc 1 992 0
 553 0004 835C     		ldrb	r3, [r0, r2]
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
 554              		.loc 1 989 0
 555 0006 0400     		movs	r4, r0
 556              		.loc 1 992 0
 557 0008 DBB2     		uxtb	r3, r3
 558 000a 012B     		cmp	r3, #1
 559 000c 06D0     		beq	.L54
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Change CAN peripheral state */
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Request leave initialisation */
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Get tick */
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     tickstart = HAL_GetTick();
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Wait the acknowledge */
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check for the Timeout */
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update error code */
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Change CAN state */
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         return HAL_ERROR;
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 560              		.loc 1 1028 0
 561 000e 8022     		movs	r2, #128
 562 0010 436A     		ldr	r3, [r0, #36]
 563 0012 1203     		lsls	r2, r2, #12
 564 0014 1343     		orrs	r3, r2
 565 0016 4362     		str	r3, [r0, #36]
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 566              		.loc 1 1030 0
ARM GAS  /tmp/ccr0EAiD.s 			page 30


 567 0018 0120     		movs	r0, #1
 568              	.LVL30:
 569              	.L51:
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 570              		.loc 1 1032 0
 571              		@ sp needed
 572              	.LVL31:
 573 001a 70BD     		pop	{r4, r5, r6, pc}
 574              	.LVL32:
 575              	.L54:
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 576              		.loc 1 995 0
 577 001c 0221     		movs	r1, #2
 578 001e 8154     		strb	r1, [r0, r2]
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 579              		.loc 1 998 0
 580 0020 0168     		ldr	r1, [r0]
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 581              		.loc 1 1004 0
 582 0022 0125     		movs	r5, #1
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 583              		.loc 1 998 0
 584 0024 0A68     		ldr	r2, [r1]
 585 0026 9A43     		bics	r2, r3
 586 0028 0A60     		str	r2, [r1]
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 587              		.loc 1 1001 0
 588 002a FFF7FEFF 		bl	HAL_GetTick
 589              	.LVL33:
 590 002e 0600     		movs	r6, r0
 591              	.LVL34:
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 592              		.loc 1 1004 0
 593 0030 04E0     		b	.L50
 594              	.LVL35:
 595              	.L52:
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 596              		.loc 1 1007 0
 597 0032 FFF7FEFF 		bl	HAL_GetTick
 598              	.LVL36:
 599 0036 801B     		subs	r0, r0, r6
 600 0038 0A28     		cmp	r0, #10
 601 003a 06D8     		bhi	.L55
 602              	.L50:
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 603              		.loc 1 1004 0
 604 003c 2368     		ldr	r3, [r4]
 605 003e 5B68     		ldr	r3, [r3, #4]
 606 0040 2B40     		ands	r3, r5
 607 0042 F6D1     		bne	.L52
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 608              		.loc 1 1020 0
 609 0044 6362     		str	r3, [r4, #36]
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 610              		.loc 1 1023 0
 611 0046 0020     		movs	r0, #0
ARM GAS  /tmp/ccr0EAiD.s 			page 31


 612 0048 E7E7     		b	.L51
 613              	.L55:
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 614              		.loc 1 1010 0
 615 004a 8022     		movs	r2, #128
 616 004c 636A     		ldr	r3, [r4, #36]
 617 004e 9202     		lsls	r2, r2, #10
 618 0050 1343     		orrs	r3, r2
 619 0052 6362     		str	r3, [r4, #36]
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 620              		.loc 1 1013 0
 621 0054 0522     		movs	r2, #5
 622 0056 2023     		movs	r3, #32
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 623              		.loc 1 1015 0
 624 0058 0120     		movs	r0, #1
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 625              		.loc 1 1013 0
 626 005a E254     		strb	r2, [r4, r3]
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 627              		.loc 1 1015 0
 628 005c DDE7     		b	.L51
 629              		.cfi_endproc
 630              	.LFE45:
 632 005e C046     		.section	.text.HAL_CAN_Stop,"ax",%progbits
 633              		.align	2
 634              		.global	HAL_CAN_Stop
 635              		.code	16
 636              		.thumb_func
 638              	HAL_CAN_Stop:
 639              	.LFB46:
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 640              		.loc 1 1041 0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 0
 643              		@ frame_needed = 0, uses_anonymous_args = 0
 644              	.LVL37:
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 645              		.loc 1 1044 0
 646 0000 2023     		movs	r3, #32
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
 647              		.loc 1 1041 0
 648 0002 70B5     		push	{r4, r5, r6, lr}
 649              	.LCFI3:
 650              		.cfi_def_cfa_offset 16
 651              		.cfi_offset 4, -16
 652              		.cfi_offset 5, -12
ARM GAS  /tmp/ccr0EAiD.s 			page 32


 653              		.cfi_offset 6, -8
 654              		.cfi_offset 14, -4
 655              		.loc 1 1044 0
 656 0004 C35C     		ldrb	r3, [r0, r3]
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tickstart;
 657              		.loc 1 1041 0
 658 0006 0400     		movs	r4, r0
 659              		.loc 1 1044 0
 660 0008 022B     		cmp	r3, #2
 661 000a 06D0     		beq	.L62
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Request initialisation */
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Get tick */
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     tickstart = HAL_GetTick();
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Wait the acknowledge */
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check for the Timeout */
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update error code */
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Change CAN state */
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         return HAL_ERROR;
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Exit from sleep mode */
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Change CAN peripheral state */
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 662              		.loc 1 1080 0
 663 000c 8022     		movs	r2, #128
 664 000e 436A     		ldr	r3, [r0, #36]
 665 0010 5203     		lsls	r2, r2, #13
 666 0012 1343     		orrs	r3, r2
 667 0014 4362     		str	r3, [r0, #36]
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 668              		.loc 1 1082 0
 669 0016 0120     		movs	r0, #1
 670              	.LVL38:
ARM GAS  /tmp/ccr0EAiD.s 			page 33


 671              	.L59:
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 672              		.loc 1 1084 0
 673              		@ sp needed
 674              	.LVL39:
 675 0018 70BD     		pop	{r4, r5, r6, pc}
 676              	.LVL40:
 677              	.L62:
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 678              		.loc 1 1047 0
 679 001a 0268     		ldr	r2, [r0]
 680 001c 013B     		subs	r3, r3, #1
 681 001e 1168     		ldr	r1, [r2]
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 682              		.loc 1 1053 0
 683 0020 0125     		movs	r5, #1
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 684              		.loc 1 1047 0
 685 0022 0B43     		orrs	r3, r1
 686 0024 1360     		str	r3, [r2]
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 687              		.loc 1 1050 0
 688 0026 FFF7FEFF 		bl	HAL_GetTick
 689              	.LVL41:
 690 002a 0600     		movs	r6, r0
 691              	.LVL42:
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 692              		.loc 1 1053 0
 693 002c 04E0     		b	.L58
 694              	.LVL43:
 695              	.L60:
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 696              		.loc 1 1056 0
 697 002e FFF7FEFF 		bl	HAL_GetTick
 698              	.LVL44:
 699 0032 801B     		subs	r0, r0, r6
 700 0034 0A28     		cmp	r0, #10
 701 0036 0CD8     		bhi	.L63
 702              	.L58:
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 703              		.loc 1 1053 0
 704 0038 2368     		ldr	r3, [r4]
 705 003a 5A68     		ldr	r2, [r3, #4]
 706 003c 1542     		tst	r5, r2
 707 003e F6D0     		beq	.L60
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 708              		.loc 1 1069 0
 709 0040 0221     		movs	r1, #2
 710 0042 1A68     		ldr	r2, [r3]
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 711              		.loc 1 1075 0
 712 0044 0020     		movs	r0, #0
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 713              		.loc 1 1069 0
 714 0046 8A43     		bics	r2, r1
 715 0048 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccr0EAiD.s 			page 34


1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 716              		.loc 1 1072 0
 717 004a 2023     		movs	r3, #32
 718 004c 0122     		movs	r2, #1
 719 004e E254     		strb	r2, [r4, r3]
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 720              		.loc 1 1075 0
 721 0050 E2E7     		b	.L59
 722              	.L63:
 723              	.LVL45:
 724              	.LBB4:
 725              	.LBB5:
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 726              		.loc 1 1059 0
 727 0052 8022     		movs	r2, #128
 728 0054 636A     		ldr	r3, [r4, #36]
 729 0056 9202     		lsls	r2, r2, #10
 730 0058 1343     		orrs	r3, r2
 731 005a 6362     		str	r3, [r4, #36]
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 732              		.loc 1 1062 0
 733 005c 0522     		movs	r2, #5
 734 005e 2023     		movs	r3, #32
 735 0060 0120     		movs	r0, #1
 736 0062 E254     		strb	r2, [r4, r3]
 737              	.LVL46:
 738 0064 D8E7     		b	.L59
 739              	.LBE5:
 740              	.LBE4:
 741              		.cfi_endproc
 742              	.LFE46:
 744 0066 C046     		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 745              		.align	2
 746              		.global	HAL_CAN_DeInit
 747              		.code	16
 748              		.thumb_func
 750              	HAL_CAN_DeInit:
 751              	.LFB41:
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check CAN handle */
 752              		.loc 1 460 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              	.LVL47:
 757 0000 10B5     		push	{r4, lr}
 758              	.LCFI4:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 4, -8
 761              		.cfi_offset 14, -4
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check CAN handle */
 762              		.loc 1 460 0
 763 0002 041E     		subs	r4, r0, #0
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 764              		.loc 1 462 0
 765 0004 10D0     		beq	.L66
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 766              		.loc 1 471 0
ARM GAS  /tmp/ccr0EAiD.s 			page 35


 767 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 768              	.LVL48:
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 769              		.loc 1 484 0
 770 000a 2000     		movs	r0, r4
 771 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 772              	.LVL49:
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 773              		.loc 1 488 0
 774 0010 8021     		movs	r1, #128
 775 0012 2268     		ldr	r2, [r4]
 776 0014 0902     		lsls	r1, r1, #8
 777 0016 1368     		ldr	r3, [r2]
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 778              		.loc 1 497 0
 779 0018 0020     		movs	r0, #0
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 780              		.loc 1 488 0
 781 001a 0B43     		orrs	r3, r1
 782 001c 1360     		str	r3, [r2]
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 783              		.loc 1 491 0
 784 001e 0023     		movs	r3, #0
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 785              		.loc 1 494 0
 786 0020 2022     		movs	r2, #32
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 787              		.loc 1 491 0
 788 0022 6362     		str	r3, [r4, #36]
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 789              		.loc 1 494 0
 790 0024 A354     		strb	r3, [r4, r2]
 791              	.L65:
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 792              		.loc 1 498 0
 793              		@ sp needed
 794              	.LVL50:
 795 0026 10BD     		pop	{r4, pc}
 796              	.LVL51:
 797              	.L66:
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 798              		.loc 1 464 0
 799 0028 0120     		movs	r0, #1
 800              	.LVL52:
 801 002a FCE7     		b	.L65
 802              		.cfi_endproc
 803              	.LFE41:
 805              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 806              		.align	2
 807              		.global	HAL_CAN_RequestSleep
 808              		.code	16
 809              		.thumb_func
 811              	HAL_CAN_RequestSleep:
 812              	.LFB47:
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
ARM GAS  /tmp/ccr0EAiD.s 			page 36


1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         of a CAN frame) has been completed.
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status.
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 813              		.loc 1 1096 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818              	.LVL53:
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 819              		.loc 1 1097 0
 820 0000 2023     		movs	r3, #32
 821 0002 C35C     		ldrb	r3, [r0, r3]
 822              	.LVL54:
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 823              		.loc 1 1099 0
 824 0004 013B     		subs	r3, r3, #1
 825              	.LVL55:
 826 0006 012B     		cmp	r3, #1
 827 0008 06D9     		bls	.L70
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Request Sleep mode */
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 828              		.loc 1 1111 0
 829 000a 8022     		movs	r2, #128
 830 000c 436A     		ldr	r3, [r0, #36]
 831 000e D202     		lsls	r2, r2, #11
 832 0010 1343     		orrs	r3, r2
 833 0012 4362     		str	r3, [r0, #36]
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 834              		.loc 1 1114 0
 835 0014 0120     		movs	r0, #1
 836              	.LVL56:
 837              	.L69:
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 838              		.loc 1 1116 0
 839              		@ sp needed
 840 0016 7047     		bx	lr
ARM GAS  /tmp/ccr0EAiD.s 			page 37


 841              	.LVL57:
 842              	.L70:
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 843              		.loc 1 1103 0
 844 0018 0223     		movs	r3, #2
 845 001a 0268     		ldr	r2, [r0]
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 846              		.loc 1 1106 0
 847 001c 0020     		movs	r0, #0
 848              	.LVL58:
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 849              		.loc 1 1103 0
 850 001e 1168     		ldr	r1, [r2]
 851 0020 0B43     		orrs	r3, r1
 852 0022 1360     		str	r3, [r2]
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 853              		.loc 1 1106 0
 854 0024 F7E7     		b	.L69
 855              		.cfi_endproc
 856              	.LFE47:
 858 0026 C046     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 859              		.align	2
 860              		.global	HAL_CAN_WakeUp
 861              		.code	16
 862              		.thumb_func
 864              	HAL_CAN_WakeUp:
 865              	.LFB48:
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         is exited.
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status.
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 866              		.loc 1 1127 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 8
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              	.LVL59:
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   __IO uint32_t count = 0;
 871              		.loc 1 1128 0
 872 0000 0023     		movs	r3, #0
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   __IO uint32_t count = 0;
 873              		.loc 1 1127 0
 874 0002 10B5     		push	{r4, lr}
 875              	.LCFI5:
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 4, -8
 878              		.cfi_offset 14, -4
 879 0004 82B0     		sub	sp, sp, #8
 880              	.LCFI6:
 881              		.cfi_def_cfa_offset 16
 882              		.loc 1 1128 0
ARM GAS  /tmp/ccr0EAiD.s 			page 38


 883 0006 0193     		str	r3, [sp, #4]
 884              	.LVL60:
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t timeout = 1000000U;
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 885              		.loc 1 1130 0
 886 0008 2033     		adds	r3, r3, #32
 887 000a C35C     		ldrb	r3, [r0, r3]
 888              	.LVL61:
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 889              		.loc 1 1132 0
 890 000c 013B     		subs	r3, r3, #1
 891              	.LVL62:
 892 000e 012B     		cmp	r3, #1
 893 0010 07D9     		bls	.L77
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Wake up request */
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Wait sleep mode is exited */
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     do
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Increment counter */
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       count++;
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check if timeout is reached */
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (count > timeout)
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update error code */
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         return HAL_ERROR;
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 894              		.loc 1 1161 0
 895 0012 8022     		movs	r2, #128
 896 0014 436A     		ldr	r3, [r0, #36]
 897 0016 D202     		lsls	r2, r2, #11
 898 0018 1343     		orrs	r3, r2
 899 001a 4362     		str	r3, [r0, #36]
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 900              		.loc 1 1163 0
 901 001c 0120     		movs	r0, #1
 902              	.LVL63:
 903              	.L74:
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
ARM GAS  /tmp/ccr0EAiD.s 			page 39


1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 904              		.loc 1 1165 0
 905 001e 02B0     		add	sp, sp, #8
 906              		@ sp needed
 907 0020 10BD     		pop	{r4, pc}
 908              	.LVL64:
 909              	.L77:
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 910              		.loc 1 1136 0
 911 0022 0221     		movs	r1, #2
 912 0024 0268     		ldr	r2, [r0]
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 913              		.loc 1 1153 0
 914 0026 0224     		movs	r4, #2
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 915              		.loc 1 1136 0
 916 0028 1368     		ldr	r3, [r2]
 917 002a 8B43     		bics	r3, r1
 918 002c 1360     		str	r3, [r2]
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 919              		.loc 1 1145 0
 920 002e 0A49     		ldr	r1, .L79
 921 0030 02E0     		b	.L75
 922              	.L73:
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 923              		.loc 1 1153 0
 924 0032 5368     		ldr	r3, [r2, #4]
 925 0034 1C42     		tst	r4, r3
 926 0036 0CD0     		beq	.L78
 927              	.L75:
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 928              		.loc 1 1142 0
 929 0038 019B     		ldr	r3, [sp, #4]
 930 003a 0133     		adds	r3, r3, #1
 931 003c 0193     		str	r3, [sp, #4]
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 932              		.loc 1 1145 0
 933 003e 019B     		ldr	r3, [sp, #4]
 934 0040 8B42     		cmp	r3, r1
 935 0042 F6D9     		bls	.L73
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 936              		.loc 1 1148 0
 937 0044 8022     		movs	r2, #128
 938 0046 436A     		ldr	r3, [r0, #36]
 939 0048 9202     		lsls	r2, r2, #10
 940 004a 1343     		orrs	r3, r2
 941 004c 4362     		str	r3, [r0, #36]
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 942              		.loc 1 1150 0
 943 004e 0120     		movs	r0, #1
 944              	.LVL65:
 945 0050 E5E7     		b	.L74
 946              	.LVL66:
 947              	.L78:
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 948              		.loc 1 1156 0
 949 0052 0020     		movs	r0, #0
ARM GAS  /tmp/ccr0EAiD.s 			page 40


 950              	.LVL67:
 951 0054 E3E7     		b	.L74
 952              	.L80:
 953 0056 C046     		.align	2
 954              	.L79:
 955 0058 40420F00 		.word	1000000
 956              		.cfi_endproc
 957              	.LFE48:
 959              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 960              		.align	2
 961              		.global	HAL_CAN_IsSleepActive
 962              		.code	16
 963              		.thumb_func
 965              	HAL_CAN_IsSleepActive:
 966              	.LFB49:
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval Status
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 967              		.loc 1 1176 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 972              	.LVL68:
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t status = 0U;
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 973              		.loc 1 1178 0
 974 0000 2023     		movs	r3, #32
 975 0002 C35C     		ldrb	r3, [r0, r3]
 976              	.LVL69:
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t status = 0U;
 977              		.loc 1 1176 0
 978 0004 0200     		movs	r2, r0
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 979              		.loc 1 1180 0
 980 0006 013B     		subs	r3, r3, #1
 981              	.LVL70:
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 982              		.loc 1 1177 0
 983 0008 0020     		movs	r0, #0
 984              	.LVL71:
 985              		.loc 1 1180 0
 986 000a 012B     		cmp	r3, #1
 987 000c 03D8     		bhi	.L82
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Sleep mode */
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
ARM GAS  /tmp/ccr0EAiD.s 			page 41


 988              		.loc 1 1184 0
 989 000e 1368     		ldr	r3, [r2]
 990 0010 5868     		ldr	r0, [r3, #4]
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 991              		.loc 1 1177 0
 992 0012 8007     		lsls	r0, r0, #30
 993 0014 C00F     		lsrs	r0, r0, #31
 994              	.L82:
 995              	.LVL72:
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       status = 1U;
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return function status */
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return status;
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 996              		.loc 1 1192 0
 997              		@ sp needed
 998 0016 7047     		bx	lr
 999              		.cfi_endproc
 1000              	.LFE49:
 1002              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1003              		.align	2
 1004              		.global	HAL_CAN_AddTxMessage
 1005              		.code	16
 1006              		.thumb_func
 1008              	HAL_CAN_AddTxMessage:
 1009              	.LFB50:
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         corresponding transmission request.
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1010              		.loc 1 1207 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              	.LVL73:
 1015 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1016              	.LCFI7:
 1017              		.cfi_def_cfa_offset 20
 1018              		.cfi_offset 4, -20
 1019              		.cfi_offset 5, -16
 1020              		.cfi_offset 6, -12
 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
ARM GAS  /tmp/ccr0EAiD.s 			page 42


1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t transmitmailbox;
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1023              		.loc 1 1209 0
 1024 0002 2024     		movs	r4, #32
 1025 0004 045D     		ldrb	r4, [r0, r4]
 1026              	.LVL74:
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1027              		.loc 1 1210 0
 1028 0006 0668     		ldr	r6, [r0]
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check the parameters */
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1029              		.loc 1 1226 0
 1030 0008 013C     		subs	r4, r4, #1
 1031              	.LVL75:
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1032              		.loc 1 1210 0
 1033 000a B568     		ldr	r5, [r6, #8]
 1034              	.LVL76:
 1035              		.loc 1 1226 0
 1036 000c 012C     		cmp	r4, #1
 1037 000e 06D9     		bls	.L92
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Select an empty transmit mailbox */
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check transmit mailbox value */
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (transmitmailbox > 2U)
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update error code */
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         return HAL_ERROR;
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Store the Tx mailbox */
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 43


1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Set up the Id */
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                                            pHeader->RTR);
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       else
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                                            pHeader->IDE |
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                                            pHeader->RTR);
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Set up the DLC */
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Set up the data field */
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Request transmission */
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Return function status */
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       return HAL_OK;
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Update error code */
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       return HAL_ERROR;
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1038              		.loc 1 1300 0
 1039 0010 8022     		movs	r2, #128
 1040              	.LVL77:
 1041 0012 436A     		ldr	r3, [r0, #36]
 1042              	.LVL78:
ARM GAS  /tmp/ccr0EAiD.s 			page 44


 1043 0014 D202     		lsls	r2, r2, #11
 1044 0016 1343     		orrs	r3, r2
 1045 0018 4362     		str	r3, [r0, #36]
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 1046              		.loc 1 1302 0
 1047 001a 0120     		movs	r0, #1
 1048              	.LVL79:
 1049              	.L88:
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1050              		.loc 1 1304 0
 1051              		@ sp needed
 1052 001c F0BD     		pop	{r4, r5, r6, r7, pc}
 1053              	.LVL80:
 1054              	.L92:
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1055              		.loc 1 1230 0
 1056 001e E024     		movs	r4, #224
 1057 0020 6405     		lsls	r4, r4, #21
 1058 0022 2542     		tst	r5, r4
 1059 0024 45D0     		beq	.L86
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1060              		.loc 1 1235 0
 1061 0026 AD01     		lsls	r5, r5, #6
 1062              	.LVL81:
 1063 0028 AD0F     		lsrs	r5, r5, #30
 1064              	.LVL82:
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 1065              		.loc 1 1238 0
 1066 002a 032D     		cmp	r5, #3
 1067 002c 48D0     		beq	.L93
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1068              		.loc 1 1247 0
 1069 002e 0120     		movs	r0, #1
 1070              	.LVL83:
 1071 0030 A840     		lsls	r0, r0, r5
 1072 0032 1860     		str	r0, [r3]
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 1073              		.loc 1 1250 0
 1074 0034 8B68     		ldr	r3, [r1, #8]
 1075              	.LVL84:
 1076 0036 002B     		cmp	r3, #0
 1077 0038 49D1     		bne	.L89
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                                            pHeader->RTR);
 1078              		.loc 1 1252 0
 1079 003a 0B68     		ldr	r3, [r1]
 1080 003c 5805     		lsls	r0, r3, #21
 1081 003e CB68     		ldr	r3, [r1, #12]
 1082 0040 1843     		orrs	r0, r3
 1083 0042 2B00     		movs	r3, r5
 1084 0044 1833     		adds	r3, r3, #24
 1085 0046 1B01     		lsls	r3, r3, #4
 1086 0048 9851     		str	r0, [r3, r6]
 1087              	.L90:
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1088              		.loc 1 1263 0
ARM GAS  /tmp/ccr0EAiD.s 			page 45


 1089 004a C223     		movs	r3, #194
 1090 004c 0869     		ldr	r0, [r1, #16]
 1091 004e 2D01     		lsls	r5, r5, #4
 1092              	.LVL85:
 1093 0050 7719     		adds	r7, r6, r5
 1094 0052 5B00     		lsls	r3, r3, #1
 1095 0054 F850     		str	r0, [r7, r3]
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 1096              		.loc 1 1266 0
 1097 0056 097D     		ldrb	r1, [r1, #20]
 1098              	.LVL86:
 1099 0058 0129     		cmp	r1, #1
 1100 005a 04D1     		bne	.L91
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 1101              		.loc 1 1268 0
 1102 005c 8020     		movs	r0, #128
 1103 005e F958     		ldr	r1, [r7, r3]
 1104 0060 4000     		lsls	r0, r0, #1
 1105 0062 0143     		orrs	r1, r0
 1106 0064 F950     		str	r1, [r7, r3]
 1107              	.L91:
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 1108              		.loc 1 1272 0
 1109 0066 5179     		ldrb	r1, [r2, #5]
 1110 0068 1479     		ldrb	r4, [r2, #4]
 1111 006a 9379     		ldrb	r3, [r2, #6]
 1112 006c 0902     		lsls	r1, r1, #8
 1113 006e 2143     		orrs	r1, r4
 1114 0070 1B04     		lsls	r3, r3, #16
 1115 0072 0B43     		orrs	r3, r1
 1116 0074 1900     		movs	r1, r3
 1117 0076 D379     		ldrb	r3, [r2, #7]
 1118 0078 7519     		adds	r5, r6, r5
 1119 007a 1B06     		lsls	r3, r3, #24
 1120 007c 0B43     		orrs	r3, r1
 1121 007e 2900     		movs	r1, r5
 1122 0080 8D31     		adds	r1, r1, #141
 1123 0082 FF31     		adds	r1, r1, #255
 1124 0084 0B60     		str	r3, [r1]
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 1125              		.loc 1 1277 0
 1126 0086 5178     		ldrb	r1, [r2, #1]
 1127 0088 1478     		ldrb	r4, [r2]
 1128 008a 9378     		ldrb	r3, [r2, #2]
 1129 008c 0902     		lsls	r1, r1, #8
 1130 008e 2143     		orrs	r1, r4
 1131 0090 1B04     		lsls	r3, r3, #16
 1132 0092 0B43     		orrs	r3, r1
 1133 0094 1900     		movs	r1, r3
 1134 0096 D378     		ldrb	r3, [r2, #3]
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1135              		.loc 1 1284 0
 1136 0098 C022     		movs	r2, #192
 1137              	.LVL87:
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 1138              		.loc 1 1277 0
 1139 009a 1B06     		lsls	r3, r3, #24
ARM GAS  /tmp/ccr0EAiD.s 			page 46


 1140 009c 8935     		adds	r5, r5, #137
 1141 009e 0B43     		orrs	r3, r1
 1142 00a0 FF35     		adds	r5, r5, #255
 1143 00a2 2B60     		str	r3, [r5]
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1144              		.loc 1 1284 0
 1145 00a4 0123     		movs	r3, #1
 1146 00a6 5200     		lsls	r2, r2, #1
 1147 00a8 B958     		ldr	r1, [r7, r2]
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1148              		.loc 1 1287 0
 1149 00aa 0020     		movs	r0, #0
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1150              		.loc 1 1284 0
 1151 00ac 0B43     		orrs	r3, r1
 1152 00ae BB50     		str	r3, [r7, r2]
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1153              		.loc 1 1287 0
 1154 00b0 B4E7     		b	.L88
 1155              	.LVL88:
 1156              	.L86:
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1157              		.loc 1 1292 0
 1158 00b2 8022     		movs	r2, #128
 1159              	.LVL89:
 1160 00b4 436A     		ldr	r3, [r0, #36]
 1161              	.LVL90:
 1162 00b6 9203     		lsls	r2, r2, #14
 1163 00b8 1343     		orrs	r3, r2
 1164 00ba 4362     		str	r3, [r0, #36]
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1165              		.loc 1 1294 0
 1166 00bc 0120     		movs	r0, #1
 1167              	.LVL91:
 1168 00be ADE7     		b	.L88
 1169              	.LVL92:
 1170              	.L93:
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1171              		.loc 1 1241 0
 1172 00c0 8022     		movs	r2, #128
 1173              	.LVL93:
 1174 00c2 436A     		ldr	r3, [r0, #36]
 1175              	.LVL94:
 1176 00c4 1204     		lsls	r2, r2, #16
 1177 00c6 1343     		orrs	r3, r2
 1178 00c8 4362     		str	r3, [r0, #36]
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 1179              		.loc 1 1243 0
 1180 00ca 0120     		movs	r0, #1
 1181              	.LVL95:
 1182 00cc A6E7     		b	.L88
 1183              	.LVL96:
 1184              	.L89:
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                                            pHeader->RTR);
 1185              		.loc 1 1258 0
 1186 00ce 4868     		ldr	r0, [r1, #4]
 1187 00d0 CC68     		ldr	r4, [r1, #12]
ARM GAS  /tmp/ccr0EAiD.s 			page 47


 1188 00d2 C000     		lsls	r0, r0, #3
 1189 00d4 2343     		orrs	r3, r4
 1190 00d6 0343     		orrs	r3, r0
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                                                            pHeader->IDE |
 1191              		.loc 1 1257 0
 1192 00d8 2800     		movs	r0, r5
 1193 00da 1830     		adds	r0, r0, #24
 1194 00dc 0001     		lsls	r0, r0, #4
 1195 00de 8351     		str	r3, [r0, r6]
 1196 00e0 B3E7     		b	.L90
 1197              		.cfi_endproc
 1198              	.LFE50:
 1200 00e2 C046     		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1201              		.align	2
 1202              		.global	HAL_CAN_AbortTxRequest
 1203              		.code	16
 1204              		.thumb_func
 1206              	HAL_CAN_AbortTxRequest:
 1207              	.LFB51:
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Abort transmission requests
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1208              		.loc 1 1315 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              	.LVL97:
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1213              		.loc 1 1316 0
 1214 0000 2023     		movs	r3, #32
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1215              		.loc 1 1315 0
 1216 0002 10B5     		push	{r4, lr}
 1217              	.LCFI8:
 1218              		.cfi_def_cfa_offset 8
 1219              		.cfi_offset 4, -8
 1220              		.cfi_offset 14, -4
 1221              		.loc 1 1316 0
 1222 0004 C35C     		ldrb	r3, [r0, r3]
 1223              	.LVL98:
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1224              		.loc 1 1315 0
 1225 0006 0200     		movs	r2, r0
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check function parameters */
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1226              		.loc 1 1321 0
ARM GAS  /tmp/ccr0EAiD.s 			page 48


 1227 0008 013B     		subs	r3, r3, #1
 1228              	.LVL99:
 1229 000a 012B     		cmp	r3, #1
 1230 000c 06D9     		bls	.L107
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1231              		.loc 1 1351 0
 1232 000e 8021     		movs	r1, #128
 1233              	.LVL100:
 1234 0010 436A     		ldr	r3, [r0, #36]
 1235 0012 C902     		lsls	r1, r1, #11
 1236 0014 0B43     		orrs	r3, r1
 1237 0016 4362     		str	r3, [r0, #36]
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 1238              		.loc 1 1353 0
 1239 0018 0120     		movs	r0, #1
 1240              	.LVL101:
 1241              	.L98:
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1242              		.loc 1 1355 0
 1243              		@ sp needed
 1244 001a 10BD     		pop	{r4, pc}
 1245              	.LVL102:
 1246              	.L107:
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1247              		.loc 1 1325 0
 1248 001c CB07     		lsls	r3, r1, #31
ARM GAS  /tmp/ccr0EAiD.s 			page 49


 1249 001e 04D5     		bpl	.L96
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1250              		.loc 1 1328 0
 1251 0020 8023     		movs	r3, #128
 1252 0022 0068     		ldr	r0, [r0]
 1253              	.LVL103:
 1254 0024 8468     		ldr	r4, [r0, #8]
 1255 0026 2343     		orrs	r3, r4
 1256 0028 8360     		str	r3, [r0, #8]
 1257              	.L96:
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1258              		.loc 1 1332 0
 1259 002a 8B07     		lsls	r3, r1, #30
 1260 002c 05D5     		bpl	.L97
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1261              		.loc 1 1335 0
 1262 002e 8024     		movs	r4, #128
 1263 0030 1068     		ldr	r0, [r2]
 1264 0032 2402     		lsls	r4, r4, #8
 1265 0034 8368     		ldr	r3, [r0, #8]
 1266 0036 2343     		orrs	r3, r4
 1267 0038 8360     		str	r3, [r0, #8]
 1268              	.L97:
1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1269              		.loc 1 1346 0
 1270 003a 0020     		movs	r0, #0
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1271              		.loc 1 1339 0
 1272 003c 4B07     		lsls	r3, r1, #29
 1273 003e ECD5     		bpl	.L98
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1274              		.loc 1 1342 0
 1275 0040 8021     		movs	r1, #128
 1276              	.LVL104:
 1277 0042 1268     		ldr	r2, [r2]
 1278              	.LVL105:
 1279 0044 0904     		lsls	r1, r1, #16
 1280 0046 9368     		ldr	r3, [r2, #8]
 1281 0048 0B43     		orrs	r3, r1
 1282 004a 9360     		str	r3, [r2, #8]
 1283 004c E5E7     		b	.L98
 1284              		.cfi_endproc
 1285              	.LFE51:
 1287 004e C046     		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1288              		.align	2
 1289              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1290              		.code	16
 1291              		.thumb_func
 1293              	HAL_CAN_GetTxMailboxesFreeLevel:
 1294              	.LFB52:
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
ARM GAS  /tmp/ccr0EAiD.s 			page 50


1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1295              		.loc 1 1364 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 0
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
 1299              		@ link register save eliminated.
 1300              	.LVL106:
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t freelevel = 0U;
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1301              		.loc 1 1366 0
 1302 0000 2023     		movs	r3, #32
 1303 0002 C35C     		ldrb	r3, [r0, r3]
 1304              	.LVL107:
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t freelevel = 0U;
 1305              		.loc 1 1364 0
 1306 0004 0200     		movs	r2, r0
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1307              		.loc 1 1368 0
 1308 0006 013B     		subs	r3, r3, #1
 1309              	.LVL108:
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1310              		.loc 1 1365 0
 1311 0008 0020     		movs	r0, #0
 1312              	.LVL109:
 1313              		.loc 1 1368 0
 1314 000a 012B     		cmp	r3, #1
 1315 000c 0BD8     		bhi	.L109
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 1316              		.loc 1 1372 0
 1317 000e 1268     		ldr	r2, [r2]
 1318              	.LVL110:
 1319 0010 9068     		ldr	r0, [r2, #8]
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       freelevel++;
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 1320              		.loc 1 1378 0
 1321 0012 9368     		ldr	r3, [r2, #8]
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1322              		.loc 1 1365 0
 1323 0014 4001     		lsls	r0, r0, #5
 1324              		.loc 1 1378 0
 1325 0016 1B01     		lsls	r3, r3, #4
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       freelevel++;
 1326              		.loc 1 1380 0
 1327 0018 DB0F     		lsrs	r3, r3, #31
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1328              		.loc 1 1365 0
 1329 001a C00F     		lsrs	r0, r0, #31
ARM GAS  /tmp/ccr0EAiD.s 			page 51


 1330              	.LVL111:
 1331              		.loc 1 1380 0
 1332 001c C018     		adds	r0, r0, r3
 1333              	.LVL112:
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 1334              		.loc 1 1384 0
 1335 001e 9368     		ldr	r3, [r2, #8]
 1336 0020 DB00     		lsls	r3, r3, #3
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       freelevel++;
 1337              		.loc 1 1386 0
 1338 0022 DB0F     		lsrs	r3, r3, #31
 1339 0024 C018     		adds	r0, r0, r3
 1340              	.LVL113:
 1341              	.L109:
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return freelevel;
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1342              		.loc 1 1392 0
 1343              		@ sp needed
 1344 0026 7047     		bx	lr
 1345              		.cfi_endproc
 1346              	.LFE52:
 1348              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1349              		.align	2
 1350              		.global	HAL_CAN_IsTxMessagePending
 1351              		.code	16
 1352              		.thumb_func
 1354              	HAL_CAN_IsTxMessagePending:
 1355              	.LFB53:
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         Mailboxes.
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval Status
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *                Tx Mailbox.
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1356              		.loc 1 1407 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
 1361              	.LVL114:
ARM GAS  /tmp/ccr0EAiD.s 			page 52


1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t status = 0U;
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1362              		.loc 1 1409 0
 1363 0000 2023     		movs	r3, #32
 1364 0002 C25C     		ldrb	r2, [r0, r3]
 1365              	.LVL115:
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t status = 0U;
 1366              		.loc 1 1408 0
 1367 0004 0023     		movs	r3, #0
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check function parameters */
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1368              		.loc 1 1414 0
 1369 0006 013A     		subs	r2, r2, #1
 1370              	.LVL116:
 1371 0008 012A     		cmp	r2, #1
 1372 000a 06D8     		bhi	.L117
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1373              		.loc 1 1418 0
 1374 000c 0368     		ldr	r3, [r0]
 1375 000e 8906     		lsls	r1, r1, #26
 1376              	.LVL117:
 1377 0010 9B68     		ldr	r3, [r3, #8]
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1378              		.loc 1 1408 0
 1379 0012 0B40     		ands	r3, r1
 1380 0014 5B1A     		subs	r3, r3, r1
 1381 0016 581E     		subs	r0, r3, #1
 1382 0018 8341     		sbcs	r3, r3, r0
 1383              	.LVL118:
 1384              	.L117:
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       status = 1U;
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return status */
1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return status;
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1385              		.loc 1 1426 0
 1386 001a 1800     		movs	r0, r3
 1387              		@ sp needed
 1388 001c 7047     		bx	lr
 1389              		.cfi_endproc
 1390              	.LFE53:
 1392 001e C046     		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1393              		.align	2
 1394              		.global	HAL_CAN_GetTxTimestamp
 1395              		.code	16
 1396              		.thumb_func
 1398              	HAL_CAN_GetTxTimestamp:
 1399              	.LFB54:
ARM GAS  /tmp/ccr0EAiD.s 			page 53


1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             mode is enabled.
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         read.
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1400              		.loc 1 1439 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 1404              	.LVL119:
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t timestamp = 0U;
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t transmitmailbox;
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1405              		.loc 1 1442 0
 1406 0000 2023     		movs	r3, #32
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t timestamp = 0U;
 1407              		.loc 1 1439 0
 1408 0002 10B5     		push	{r4, lr}
 1409              	.LCFI9:
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 4, -8
 1412              		.cfi_offset 14, -4
 1413              		.loc 1 1442 0
 1414 0004 C35C     		ldrb	r3, [r0, r3]
 1415              	.LVL120:
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t timestamp = 0U;
 1416              		.loc 1 1439 0
 1417 0006 0400     		movs	r4, r0
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check function parameters */
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1418              		.loc 1 1447 0
 1419 0008 013B     		subs	r3, r3, #1
 1420              	.LVL121:
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t transmitmailbox;
 1421              		.loc 1 1440 0
 1422 000a 0020     		movs	r0, #0
 1423              	.LVL122:
 1424              		.loc 1 1447 0
 1425 000c 012B     		cmp	r3, #1
 1426 000e 00D9     		bls	.L125
 1427              	.LVL123:
 1428              	.L120:
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Select the Tx mailbox */
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Select the Tx mailbox */
ARM GAS  /tmp/ccr0EAiD.s 			page 54


1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (TxMailbox == CAN_TX_MAILBOX0)
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       transmitmailbox = 0U;
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else if (TxMailbox == CAN_TX_MAILBOX1)
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       transmitmailbox = 1U;
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else /* (TxMailbox == CAN_TX_MAILBOX2) */
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       transmitmailbox = 2U;
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Get timestamp */
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return the timestamp */
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return timestamp;
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1429              		.loc 1 1471 0
 1430              		@ sp needed
 1431              	.LVL124:
 1432 0010 10BD     		pop	{r4, pc}
 1433              	.LVL125:
 1434              	.L125:
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1435              		.loc 1 1452 0
 1436 0012 0129     		cmp	r1, #1
 1437 0014 0CD0     		beq	.L123
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1438              		.loc 1 1462 0
 1439 0016 0239     		subs	r1, r1, #2
 1440              	.LVL126:
 1441 0018 4B42     		rsbs	r3, r1, #0
 1442 001a 4B41     		adcs	r3, r3, r1
 1443              	.LVL127:
 1444 001c 0222     		movs	r2, #2
 1445 001e D11A     		subs	r1, r2, r3
 1446              	.L121:
 1447              	.LVL128:
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1448              		.loc 1 1466 0
 1449 0020 0B00     		movs	r3, r1
 1450 0022 2268     		ldr	r2, [r4]
 1451 0024 1833     		adds	r3, r3, #24
 1452 0026 1B01     		lsls	r3, r3, #4
 1453 0028 D318     		adds	r3, r2, r3
 1454 002a 5868     		ldr	r0, [r3, #4]
 1455 002c 000C     		lsrs	r0, r0, #16
 1456              	.LVL129:
 1457 002e EFE7     		b	.L120
 1458              	.LVL130:
 1459              	.L123:
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1460              		.loc 1 1454 0
 1461 0030 0021     		movs	r1, #0
ARM GAS  /tmp/ccr0EAiD.s 			page 55


 1462              	.LVL131:
 1463 0032 F5E7     		b	.L121
 1464              		.cfi_endproc
 1465              	.LFE54:
 1467              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1468              		.align	2
 1469              		.global	HAL_CAN_GetRxMessage
 1470              		.code	16
 1471              		.thumb_func
 1473              	HAL_CAN_GetRxMessage:
 1474              	.LFB55:
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         of the Rx frame will be stored.
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1475              		.loc 1 1485 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              	.LVL132:
 1480 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1481              	.LCFI10:
 1482              		.cfi_def_cfa_offset 20
 1483              		.cfi_offset 4, -20
 1484              		.cfi_offset 5, -16
 1485              		.cfi_offset 6, -12
 1486              		.cfi_offset 7, -8
 1487              		.cfi_offset 14, -4
 1488 0002 4F46     		mov	r7, r9
 1489 0004 4646     		mov	r6, r8
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1490              		.loc 1 1486 0
 1491 0006 2024     		movs	r4, #32
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1492              		.loc 1 1485 0
 1493 0008 C0B4     		push	{r6, r7}
 1494              	.LCFI11:
 1495              		.cfi_def_cfa_offset 28
 1496              		.cfi_offset 8, -28
 1497              		.cfi_offset 9, -24
 1498              		.loc 1 1486 0
 1499 000a 045D     		ldrb	r4, [r0, r4]
 1500              	.LVL133:
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccr0EAiD.s 			page 56


 1501              		.loc 1 1490 0
 1502 000c 013C     		subs	r4, r4, #1
 1503              	.LVL134:
 1504 000e 012C     		cmp	r4, #1
 1505 0010 09D9     		bls	.L135
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check the Rx FIFO */
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update error code */
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         return HAL_ERROR;
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Update error code */
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         return HAL_ERROR;
1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Get the header */
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Get the data */
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Release the FIFO */
ARM GAS  /tmp/ccr0EAiD.s 			page 57


1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Release RX FIFO 0 */
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Release RX FIFO 1 */
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1506              		.loc 1 1560 0
 1507 0012 8022     		movs	r2, #128
 1508              	.LVL135:
 1509 0014 436A     		ldr	r3, [r0, #36]
 1510              	.LVL136:
 1511 0016 D202     		lsls	r2, r2, #11
 1512 0018 1343     		orrs	r3, r2
 1513 001a 4362     		str	r3, [r0, #36]
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 1514              		.loc 1 1562 0
 1515 001c 0120     		movs	r0, #1
 1516              	.LVL137:
 1517              	.L130:
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1518              		.loc 1 1564 0
 1519              		@ sp needed
 1520 001e 0CBC     		pop	{r2, r3}
 1521 0020 9046     		mov	r8, r2
 1522 0022 9946     		mov	r9, r3
 1523 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 1524              	.LVL138:
 1525              	.L135:
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 1526              		.loc 1 1497 0
 1527 0026 0468     		ldr	r4, [r0]
 1528 0028 A146     		mov	r9, r4
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1529              		.loc 1 1494 0
 1530 002a 0029     		cmp	r1, #0
 1531 002c 67D0     		beq	.L136
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 1532              		.loc 1 1508 0
 1533 002e 2469     		ldr	r4, [r4, #16]
 1534 0030 A407     		lsls	r4, r4, #30
 1535 0032 67D0     		beq	.L134
 1536              	.L129:
 1537 0034 4D46     		mov	r5, r9
ARM GAS  /tmp/ccr0EAiD.s 			page 58


1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1538              		.loc 1 1518 0
 1539 0036 D827     		movs	r7, #216
 1540 0038 0C01     		lsls	r4, r1, #4
 1541 003a 2E19     		adds	r6, r5, r4
 1542 003c 7F00     		lsls	r7, r7, #1
 1543 003e 0425     		movs	r5, #4
 1544 0040 BC46     		mov	ip, r7
 1545 0042 F759     		ldr	r7, [r6, r7]
 1546 0044 2F40     		ands	r7, r5
 1547 0046 9760     		str	r7, [r2, #8]
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1548              		.loc 1 1521 0
 1549 0048 6546     		mov	r5, ip
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1550              		.loc 1 1519 0
 1551 004a 68D1     		bne	.L131
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1552              		.loc 1 1521 0
 1553 004c 7759     		ldr	r7, [r6, r5]
 1554 004e 7F0D     		lsrs	r7, r7, #21
 1555 0050 1760     		str	r7, [r2]
 1556              	.L132:
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1557              		.loc 1 1527 0
 1558 0052 D827     		movs	r7, #216
 1559 0054 0225     		movs	r5, #2
 1560 0056 7F00     		lsls	r7, r7, #1
 1561 0058 F759     		ldr	r7, [r6, r7]
 1562 005a 2F40     		ands	r7, r5
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1563              		.loc 1 1528 0
 1564 005c B335     		adds	r5, r5, #179
 1565 005e FF35     		adds	r5, r5, #255
 1566 0060 AC46     		mov	ip, r5
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1567              		.loc 1 1527 0
 1568 0062 D760     		str	r7, [r2, #12]
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1569              		.loc 1 1528 0
 1570 0064 7759     		ldr	r7, [r6, r5]
 1571 0066 A63D     		subs	r5, r5, #166
 1572 0068 FF3D     		subs	r5, r5, #255
 1573 006a 2F40     		ands	r7, r5
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1574              		.loc 1 1529 0
 1575 006c 6546     		mov	r5, ip
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1576              		.loc 1 1528 0
 1577 006e 1761     		str	r7, [r2, #16]
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1578              		.loc 1 1529 0
 1579 0070 7759     		ldr	r7, [r6, r5]
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1580              		.loc 1 1530 0
 1581 0072 7659     		ldr	r6, [r6, r5]
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
ARM GAS  /tmp/ccr0EAiD.s 			page 59


 1582              		.loc 1 1529 0
 1583 0074 3F04     		lsls	r7, r7, #16
 1584 0076 3F0E     		lsrs	r7, r7, #24
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1585              		.loc 1 1530 0
 1586 0078 360C     		lsrs	r6, r6, #16
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1587              		.loc 1 1529 0
 1588 007a 9761     		str	r7, [r2, #24]
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1589              		.loc 1 1530 0
 1590 007c 5661     		str	r6, [r2, #20]
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1591              		.loc 1 1533 0
 1592 007e 4A46     		mov	r2, r9
 1593              	.LVL139:
 1594 0080 1519     		adds	r5, r2, r4
 1595 0082 B935     		adds	r5, r5, #185
 1596 0084 FF35     		adds	r5, r5, #255
 1597 0086 2A68     		ldr	r2, [r5]
 1598 0088 1A70     		strb	r2, [r3]
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1599              		.loc 1 1534 0
 1600 008a 0268     		ldr	r2, [r0]
 1601 008c 1219     		adds	r2, r2, r4
 1602 008e B932     		adds	r2, r2, #185
 1603 0090 FF32     		adds	r2, r2, #255
 1604 0092 1268     		ldr	r2, [r2]
 1605 0094 120A     		lsrs	r2, r2, #8
 1606 0096 5A70     		strb	r2, [r3, #1]
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1607              		.loc 1 1535 0
 1608 0098 0268     		ldr	r2, [r0]
 1609 009a 1219     		adds	r2, r2, r4
 1610 009c B932     		adds	r2, r2, #185
 1611 009e FF32     		adds	r2, r2, #255
 1612 00a0 1268     		ldr	r2, [r2]
 1613 00a2 120C     		lsrs	r2, r2, #16
 1614 00a4 9A70     		strb	r2, [r3, #2]
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1615              		.loc 1 1536 0
 1616 00a6 0268     		ldr	r2, [r0]
 1617 00a8 1219     		adds	r2, r2, r4
 1618 00aa B932     		adds	r2, r2, #185
 1619 00ac FF32     		adds	r2, r2, #255
 1620 00ae 1268     		ldr	r2, [r2]
 1621 00b0 120E     		lsrs	r2, r2, #24
 1622 00b2 DA70     		strb	r2, [r3, #3]
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1623              		.loc 1 1537 0
 1624 00b4 0268     		ldr	r2, [r0]
 1625 00b6 1219     		adds	r2, r2, r4
 1626 00b8 BD32     		adds	r2, r2, #189
 1627 00ba FF32     		adds	r2, r2, #255
 1628 00bc 1268     		ldr	r2, [r2]
 1629 00be 1A71     		strb	r2, [r3, #4]
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
ARM GAS  /tmp/ccr0EAiD.s 			page 60


 1630              		.loc 1 1538 0
 1631 00c0 0268     		ldr	r2, [r0]
 1632 00c2 1219     		adds	r2, r2, r4
 1633 00c4 BD32     		adds	r2, r2, #189
 1634 00c6 FF32     		adds	r2, r2, #255
 1635 00c8 1268     		ldr	r2, [r2]
 1636 00ca 120A     		lsrs	r2, r2, #8
 1637 00cc 5A71     		strb	r2, [r3, #5]
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1638              		.loc 1 1539 0
 1639 00ce 0268     		ldr	r2, [r0]
 1640 00d0 1219     		adds	r2, r2, r4
 1641 00d2 BD32     		adds	r2, r2, #189
 1642 00d4 FF32     		adds	r2, r2, #255
 1643 00d6 1268     		ldr	r2, [r2]
 1644 00d8 120C     		lsrs	r2, r2, #16
 1645 00da 9A71     		strb	r2, [r3, #6]
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1646              		.loc 1 1540 0
 1647 00dc 0268     		ldr	r2, [r0]
 1648 00de 9446     		mov	ip, r2
 1649 00e0 6444     		add	r4, r4, ip
 1650 00e2 BD34     		adds	r4, r4, #189
 1651 00e4 FF34     		adds	r4, r4, #255
 1652 00e6 2268     		ldr	r2, [r4]
 1653 00e8 120E     		lsrs	r2, r2, #24
 1654 00ea DA71     		strb	r2, [r3, #7]
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1655              		.loc 1 1546 0
 1656 00ec 0268     		ldr	r2, [r0]
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1657              		.loc 1 1543 0
 1658 00ee 0029     		cmp	r1, #0
 1659 00f0 0FD1     		bne	.L133
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1660              		.loc 1 1546 0
 1661 00f2 2023     		movs	r3, #32
 1662              	.LVL140:
 1663 00f4 D168     		ldr	r1, [r2, #12]
 1664              	.LVL141:
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1665              		.loc 1 1555 0
 1666 00f6 0020     		movs	r0, #0
 1667              	.LVL142:
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1668              		.loc 1 1546 0
 1669 00f8 0B43     		orrs	r3, r1
 1670 00fa D360     		str	r3, [r2, #12]
 1671 00fc 8FE7     		b	.L130
 1672              	.LVL143:
 1673              	.L136:
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 1674              		.loc 1 1497 0
 1675 00fe E468     		ldr	r4, [r4, #12]
 1676 0100 A407     		lsls	r4, r4, #30
 1677 0102 97D1     		bne	.L129
 1678              	.L134:
ARM GAS  /tmp/ccr0EAiD.s 			page 61


1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1679              		.loc 1 1511 0
 1680 0104 8022     		movs	r2, #128
 1681              	.LVL144:
 1682 0106 436A     		ldr	r3, [r0, #36]
 1683              	.LVL145:
 1684 0108 9203     		lsls	r2, r2, #14
 1685 010a 1343     		orrs	r3, r2
 1686 010c 4362     		str	r3, [r0, #36]
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 1687              		.loc 1 1513 0
 1688 010e 0120     		movs	r0, #1
 1689              	.LVL146:
 1690 0110 85E7     		b	.L130
 1691              	.LVL147:
 1692              	.L133:
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1693              		.loc 1 1551 0
 1694 0112 2023     		movs	r3, #32
 1695              	.LVL148:
 1696 0114 1169     		ldr	r1, [r2, #16]
 1697              	.LVL149:
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1698              		.loc 1 1555 0
 1699 0116 0020     		movs	r0, #0
 1700              	.LVL150:
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1701              		.loc 1 1551 0
 1702 0118 0B43     		orrs	r3, r1
 1703 011a 1361     		str	r3, [r2, #16]
 1704 011c 7FE7     		b	.L130
 1705              	.LVL151:
 1706              	.L131:
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1707              		.loc 1 1525 0
 1708 011e 7759     		ldr	r7, [r6, r5]
 1709 0120 FF08     		lsrs	r7, r7, #3
 1710 0122 5760     		str	r7, [r2, #4]
 1711 0124 95E7     		b	.L132
 1712              		.cfi_endproc
 1713              	.LFE55:
 1715 0126 C046     		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1716              		.align	2
 1717              		.global	HAL_CAN_GetRxFifoFillLevel
 1718              		.code	16
 1719              		.thumb_func
 1721              	HAL_CAN_GetRxFifoFillLevel:
 1722              	.LFB56:
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
ARM GAS  /tmp/ccr0EAiD.s 			page 62


1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1723              		.loc 1 1575 0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 0
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 1727              		@ link register save eliminated.
 1728              	.LVL152:
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t filllevel = 0U;
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1729              		.loc 1 1577 0
 1730 0000 2023     		movs	r3, #32
 1731 0002 C35C     		ldrb	r3, [r0, r3]
 1732              	.LVL153:
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t filllevel = 0U;
 1733              		.loc 1 1575 0
 1734 0004 0200     		movs	r2, r0
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check function parameters */
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1735              		.loc 1 1582 0
 1736 0006 013B     		subs	r3, r3, #1
 1737              	.LVL154:
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1738              		.loc 1 1576 0
 1739 0008 0020     		movs	r0, #0
 1740              	.LVL155:
 1741              		.loc 1 1582 0
 1742 000a 012B     		cmp	r3, #1
 1743 000c 00D9     		bls	.L141
 1744              	.LVL156:
 1745              	.L138:
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return Rx FIFO fill level */
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return filllevel;
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1746              		.loc 1 1597 0
 1747              		@ sp needed
 1748 000e 7047     		bx	lr
 1749              	.LVL157:
 1750              	.L141:
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1751              		.loc 1 1587 0
 1752 0010 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccr0EAiD.s 			page 63


1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 1753              		.loc 1 1585 0
 1754 0012 0029     		cmp	r1, #0
 1755 0014 03D0     		beq	.L142
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1756              		.loc 1 1591 0
 1757 0016 0320     		movs	r0, #3
 1758 0018 1B69     		ldr	r3, [r3, #16]
 1759 001a 1840     		ands	r0, r3
 1760              	.LVL158:
 1761 001c F7E7     		b	.L138
 1762              	.LVL159:
 1763              	.L142:
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 1764              		.loc 1 1587 0
 1765 001e DB68     		ldr	r3, [r3, #12]
 1766 0020 0330     		adds	r0, r0, #3
 1767 0022 1840     		ands	r0, r3
 1768              	.LVL160:
 1769 0024 F3E7     		b	.L138
 1770              		.cfi_endproc
 1771              	.LFE56:
 1773 0026 C046     		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1774              		.align	2
 1775              		.global	HAL_CAN_ActivateNotification
 1776              		.code	16
 1777              		.thumb_func
 1779              	HAL_CAN_ActivateNotification:
 1780              	.LFB57:
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @}
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *  @brief    Interrupts management
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @verbatim
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                        ##### Interrupts management #####
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]  This section provides functions allowing to:
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @endverbatim
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Enable interrupts.
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
ARM GAS  /tmp/ccr0EAiD.s 			page 64


1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1781              		.loc 1 1628 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 1786              	.LVL161:
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1787              		.loc 1 1629 0
 1788 0000 2023     		movs	r3, #32
 1789 0002 C35C     		ldrb	r3, [r0, r3]
 1790              	.LVL162:
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check function parameters */
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1791              		.loc 1 1634 0
 1792 0004 013B     		subs	r3, r3, #1
 1793              	.LVL163:
 1794 0006 012B     		cmp	r3, #1
 1795 0008 06D9     		bls	.L146
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Enable the selected interrupts */
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1796              		.loc 1 1646 0
 1797 000a 8022     		movs	r2, #128
 1798 000c 436A     		ldr	r3, [r0, #36]
 1799 000e D202     		lsls	r2, r2, #11
 1800 0010 1343     		orrs	r3, r2
 1801 0012 4362     		str	r3, [r0, #36]
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 1802              		.loc 1 1648 0
 1803 0014 0120     		movs	r0, #1
 1804              	.LVL164:
 1805              	.L145:
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1806              		.loc 1 1650 0
 1807              		@ sp needed
 1808 0016 7047     		bx	lr
 1809              	.LVL165:
 1810              	.L146:
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1811              		.loc 1 1638 0
ARM GAS  /tmp/ccr0EAiD.s 			page 65


 1812 0018 0368     		ldr	r3, [r0]
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1813              		.loc 1 1641 0
 1814 001a 0020     		movs	r0, #0
 1815              	.LVL166:
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1816              		.loc 1 1638 0
 1817 001c 5A69     		ldr	r2, [r3, #20]
 1818 001e 1143     		orrs	r1, r2
 1819              	.LVL167:
 1820 0020 5961     		str	r1, [r3, #20]
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1821              		.loc 1 1641 0
 1822 0022 F8E7     		b	.L145
 1823              		.cfi_endproc
 1824              	.LFE57:
 1826              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1827              		.align	2
 1828              		.global	HAL_CAN_DeactivateNotification
 1829              		.code	16
 1830              		.thumb_func
 1832              	HAL_CAN_DeactivateNotification:
 1833              	.LFB58:
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Disable interrupts.
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 1834              		.loc 1 1661 0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		@ link register save eliminated.
 1839              	.LVL168:
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1840              		.loc 1 1662 0
 1841 0000 2023     		movs	r3, #32
 1842 0002 C35C     		ldrb	r3, [r0, r3]
 1843              	.LVL169:
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Check function parameters */
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1844              		.loc 1 1667 0
 1845 0004 013B     		subs	r3, r3, #1
 1846              	.LVL170:
 1847 0006 012B     		cmp	r3, #1
 1848 0008 06D9     		bls	.L150
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
ARM GAS  /tmp/ccr0EAiD.s 			page 66


1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Disable the selected interrupts */
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Return function status */
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_OK;
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1849              		.loc 1 1679 0
 1850 000a 8022     		movs	r2, #128
 1851 000c 436A     		ldr	r3, [r0, #36]
 1852 000e D202     		lsls	r2, r2, #11
 1853 0010 1343     		orrs	r3, r2
 1854 0012 4362     		str	r3, [r0, #36]
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     return HAL_ERROR;
 1855              		.loc 1 1681 0
 1856 0014 0120     		movs	r0, #1
 1857              	.LVL171:
 1858              	.L149:
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 1859              		.loc 1 1683 0
 1860              		@ sp needed
 1861 0016 7047     		bx	lr
 1862              	.LVL172:
 1863              	.L150:
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1864              		.loc 1 1671 0
 1865 0018 0268     		ldr	r2, [r0]
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1866              		.loc 1 1674 0
 1867 001a 0020     		movs	r0, #0
 1868              	.LVL173:
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 1869              		.loc 1 1671 0
 1870 001c 5369     		ldr	r3, [r2, #20]
 1871 001e 8B43     		bics	r3, r1
 1872 0020 5361     		str	r3, [r2, #20]
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 1873              		.loc 1 1674 0
 1874 0022 F8E7     		b	.L149
 1875              		.cfi_endproc
 1876              	.LFE58:
 1878              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1879              		.align	2
 1880              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1881              		.code	16
 1882              		.thumb_func
 1884              	HAL_CAN_TxMailbox0CompleteCallback:
 1885              	.LFB100:
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
ARM GAS  /tmp/ccr0EAiD.s 			page 67


 1890              		@ sp needed
 1891 0000 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE100:
 1895 0002 C046     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1896              		.align	2
 1897              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1898              		.code	16
 1899              		.thumb_func
 1901              	HAL_CAN_TxMailbox1CompleteCallback:
 1902              	.LFB98:
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 0
 1905              		@ frame_needed = 0, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
 1907              		@ sp needed
 1908 0000 7047     		bx	lr
 1909              		.cfi_endproc
 1910              	.LFE98:
 1912 0002 C046     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1913              		.align	2
 1914              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1915              		.code	16
 1916              		.thumb_func
 1918              	HAL_CAN_TxMailbox2CompleteCallback:
 1919              	.LFB96:
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 1924              		@ sp needed
 1925 0000 7047     		bx	lr
 1926              		.cfi_endproc
 1927              	.LFE96:
 1929 0002 C046     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1930              		.align	2
 1931              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1932              		.code	16
 1933              		.thumb_func
 1935              	HAL_CAN_TxMailbox0AbortCallback:
 1936              	.LFB94:
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 0
 1939              		@ frame_needed = 0, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 1941              		@ sp needed
 1942 0000 7047     		bx	lr
 1943              		.cfi_endproc
 1944              	.LFE94:
 1946 0002 C046     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1947              		.align	2
 1948              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1949              		.code	16
 1950              		.thumb_func
 1952              	HAL_CAN_TxMailbox1AbortCallback:
 1953              	.LFB92:
 1954              		.cfi_startproc
ARM GAS  /tmp/ccr0EAiD.s 			page 68


 1955              		@ args = 0, pretend = 0, frame = 0
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 1957              		@ link register save eliminated.
 1958              		@ sp needed
 1959 0000 7047     		bx	lr
 1960              		.cfi_endproc
 1961              	.LFE92:
 1963 0002 C046     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1964              		.align	2
 1965              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1966              		.code	16
 1967              		.thumb_func
 1969              	HAL_CAN_TxMailbox2AbortCallback:
 1970              	.LFB90:
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 0
 1973              		@ frame_needed = 0, uses_anonymous_args = 0
 1974              		@ link register save eliminated.
 1975              		@ sp needed
 1976 0000 7047     		bx	lr
 1977              		.cfi_endproc
 1978              	.LFE90:
 1980 0002 C046     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1981              		.align	2
 1982              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1983              		.code	16
 1984              		.thumb_func
 1986              	HAL_CAN_RxFifo0MsgPendingCallback:
 1987              	.LFB88:
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 0
 1990              		@ frame_needed = 0, uses_anonymous_args = 0
 1991              		@ link register save eliminated.
 1992              		@ sp needed
 1993 0000 7047     		bx	lr
 1994              		.cfi_endproc
 1995              	.LFE88:
 1997 0002 C046     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1998              		.align	2
 1999              		.weak	HAL_CAN_RxFifo0FullCallback
 2000              		.code	16
 2001              		.thumb_func
 2003              	HAL_CAN_RxFifo0FullCallback:
 2004              	.LFB86:
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 2009              		@ sp needed
 2010 0000 7047     		bx	lr
 2011              		.cfi_endproc
 2012              	.LFE86:
 2014 0002 C046     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 2015              		.align	2
 2016              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 2017              		.code	16
 2018              		.thumb_func
ARM GAS  /tmp/ccr0EAiD.s 			page 69


 2020              	HAL_CAN_RxFifo1MsgPendingCallback:
 2021              	.LFB84:
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 2025              		@ link register save eliminated.
 2026              		@ sp needed
 2027 0000 7047     		bx	lr
 2028              		.cfi_endproc
 2029              	.LFE84:
 2031 0002 C046     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 2032              		.align	2
 2033              		.weak	HAL_CAN_RxFifo1FullCallback
 2034              		.code	16
 2035              		.thumb_func
 2037              	HAL_CAN_RxFifo1FullCallback:
 2038              	.LFB82:
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 0
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 2042              		@ link register save eliminated.
 2043              		@ sp needed
 2044 0000 7047     		bx	lr
 2045              		.cfi_endproc
 2046              	.LFE82:
 2048 0002 C046     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 2049              		.align	2
 2050              		.weak	HAL_CAN_SleepCallback
 2051              		.code	16
 2052              		.thumb_func
 2054              	HAL_CAN_SleepCallback:
 2055              	.LFB80:
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 0, uses_anonymous_args = 0
 2059              		@ link register save eliminated.
 2060              		@ sp needed
 2061 0000 7047     		bx	lr
 2062              		.cfi_endproc
 2063              	.LFE80:
 2065 0002 C046     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 2066              		.align	2
 2067              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 2068              		.code	16
 2069              		.thumb_func
 2071              	HAL_CAN_WakeUpFromRxMsgCallback:
 2072              	.LFB78:
 2073              		.cfi_startproc
 2074              		@ args = 0, pretend = 0, frame = 0
 2075              		@ frame_needed = 0, uses_anonymous_args = 0
 2076              		@ link register save eliminated.
 2077              		@ sp needed
 2078 0000 7047     		bx	lr
 2079              		.cfi_endproc
 2080              	.LFE78:
 2082 0002 C046     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 2083              		.align	2
ARM GAS  /tmp/ccr0EAiD.s 			page 70


 2084              		.weak	HAL_CAN_ErrorCallback
 2085              		.code	16
 2086              		.thumb_func
 2088              	HAL_CAN_ErrorCallback:
 2089              	.LFB72:
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Call registered callback*/
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Call weak (surcharged) callback */
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       else
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Update error code */
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Update error code */
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         else
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
ARM GAS  /tmp/ccr0EAiD.s 			page 71


1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Call registered callback*/
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Call weak (surcharged) callback */
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Call registered callback*/
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Call weak (surcharged) callback */
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       else
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Update error code */
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Update error code */
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         else
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Call registered callback*/
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Call weak (surcharged) callback */
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
ARM GAS  /tmp/ccr0EAiD.s 			page 72


1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Call registered callback*/
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Call weak (surcharged) callback */
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       else
1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Update error code */
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Update error code */
1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         else
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Call registered callback*/
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           /* Call weak (surcharged) callback */
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
ARM GAS  /tmp/ccr0EAiD.s 			page 73


1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call registered callback*/
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call weak (surcharged) callback */
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check if message is still pending */
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call registered callback*/
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call weak (surcharged) callback */
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call registered callback*/
ARM GAS  /tmp/ccr0EAiD.s 			page 74


1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call weak (surcharged) callback */
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check if message is still pending */
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call registered callback*/
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call weak (surcharged) callback */
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Sleep Callback */
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call registered callback*/
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->SleepCallback(hcan);
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call weak (surcharged) callback */
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Clear WakeUp Flag */
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* WakeUp Callback */
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call registered callback*/
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
ARM GAS  /tmp/ccr0EAiD.s 			page 75


1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Call weak (surcharged) callback */
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Error interrupts management *********************************************/
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check Error Warning Flag */
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check Error Passive Flag */
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check Bus-off Flag */
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Check Last Error Code Flag */
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             /* Set CAN error code to Form error */
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
ARM GAS  /tmp/ccr0EAiD.s 			page 76


2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             /* Set CAN error code to CRC error */
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           default:
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
2037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         /* Clear Last error code Flag */
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
2043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Clear ERRI Flag */
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
2051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code in handle */
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Call Error callback function */
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Call registered callback*/
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #else
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Call weak (surcharged) callback */
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @}
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *  @brief   CAN Callback functions
2071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *
2072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @verbatim
2073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****                           ##### Callback functions #####
2075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     This subsection provides the following callback functions:
ARM GAS  /tmp/ccr0EAiD.s 			page 77


2078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @endverbatim
2093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
2094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
ARM GAS  /tmp/ccr0EAiD.s 			page 78


2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 79


2192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             file
2229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
ARM GAS  /tmp/ccr0EAiD.s 			page 80


2249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             file
2263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Sleep callback.
2268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
2290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             user file
2296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
2298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Error CAN callback.
2301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval None
2304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
ARM GAS  /tmp/ccr0EAiD.s 			page 81


2306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 2090              		.loc 1 2306 0
 2091              		.cfi_startproc
 2092              		@ args = 0, pretend = 0, frame = 0
 2093              		@ frame_needed = 0, uses_anonymous_args = 0
 2094              		@ link register save eliminated.
 2095              	.LVL174:
2307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   UNUSED(hcan);
2309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****    */
2313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 2096              		.loc 1 2313 0
 2097              		@ sp needed
 2098 0000 7047     		bx	lr
 2099              		.cfi_endproc
 2100              	.LFE72:
 2102 0002 C046     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2103              		.align	2
 2104              		.global	HAL_CAN_IRQHandler
 2105              		.code	16
 2106              		.thumb_func
 2108              	HAL_CAN_IRQHandler:
 2109              	.LFB59:
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2110              		.loc 1 1692 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              	.LVL175:
 2115 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2116              	.LCFI12:
 2117              		.cfi_def_cfa_offset 24
 2118              		.cfi_offset 3, -24
 2119              		.cfi_offset 4, -20
 2120              		.cfi_offset 5, -16
 2121              		.cfi_offset 6, -12
 2122              		.cfi_offset 7, -8
 2123              		.cfi_offset 14, -4
 2124 0002 5F46     		mov	r7, fp
 2125 0004 5646     		mov	r6, r10
 2126 0006 4D46     		mov	r5, r9
 2127 0008 4446     		mov	r4, r8
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2128              		.loc 1 1694 0
 2129 000a 0368     		ldr	r3, [r0]
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2130              		.loc 1 1692 0
 2131 000c F0B4     		push	{r4, r5, r6, r7}
 2132              	.LCFI13:
 2133              		.cfi_def_cfa_offset 40
 2134              		.cfi_offset 8, -40
 2135              		.cfi_offset 9, -36
 2136              		.cfi_offset 10, -32
 2137              		.cfi_offset 11, -28
ARM GAS  /tmp/ccr0EAiD.s 			page 82


1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2138              		.loc 1 1694 0
 2139 000e 5C69     		ldr	r4, [r3, #20]
 2140              	.LVL176:
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2141              		.loc 1 1695 0
 2142 0010 5A68     		ldr	r2, [r3, #4]
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2143              		.loc 1 1696 0
 2144 0012 9F68     		ldr	r7, [r3, #8]
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2145              		.loc 1 1695 0
 2146 0014 9046     		mov	r8, r2
 2147              	.LVL177:
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2148              		.loc 1 1697 0
 2149 0016 DA68     		ldr	r2, [r3, #12]
 2150              	.LVL178:
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2151              		.loc 1 1692 0
 2152 0018 0500     		movs	r5, r0
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2153              		.loc 1 1697 0
 2154 001a 9246     		mov	r10, r2
 2155              	.LVL179:
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2156              		.loc 1 1698 0
 2157 001c 1A69     		ldr	r2, [r3, #16]
 2158              	.LVL180:
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2159              		.loc 1 1693 0
 2160 001e 0026     		movs	r6, #0
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2161              		.loc 1 1698 0
 2162 0020 9146     		mov	r9, r2
 2163              	.LVL181:
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2164              		.loc 1 1699 0
 2165 0022 9A69     		ldr	r2, [r3, #24]
 2166              	.LVL182:
 2167 0024 9346     		mov	fp, r2
 2168              	.LVL183:
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2169              		.loc 1 1702 0
 2170 0026 0122     		movs	r2, #1
 2171              	.LVL184:
 2172 0028 2242     		tst	r2, r4
 2173 002a 21D0     		beq	.L165
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2174              		.loc 1 1705 0
 2175 002c 3A42     		tst	r2, r7
 2176 002e 0BD0     		beq	.L166
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2177              		.loc 1 1708 0
 2178 0030 9A60     		str	r2, [r3, #8]
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 2179              		.loc 1 1710 0
ARM GAS  /tmp/ccr0EAiD.s 			page 83


 2180 0032 BB07     		lsls	r3, r7, #30
 2181 0034 00D5     		bpl	.LCB1918
 2182 0036 CCE0     		b	.L287	@long jump
 2183              	.LCB1918:
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2184              		.loc 1 1723 0
 2185 0038 7B07     		lsls	r3, r7, #29
 2186 003a 00D5     		bpl	.LCB1922
 2187 003c CCE0     		b	.L202	@long jump
 2188              	.LCB1922:
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2189              		.loc 1 1728 0
 2190 003e 3B07     		lsls	r3, r7, #28
 2191 0040 00D4     		bmi	.LCB1926
 2192 0042 DDE0     		b	.L288	@long jump
 2193              	.LCB1926:
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
 2194              		.loc 1 1731 0
 2195 0044 8026     		movs	r6, #128
 2196 0046 7601     		lsls	r6, r6, #5
 2197              	.LVL185:
 2198              	.L166:
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2199              		.loc 1 1748 0
 2200 0048 8023     		movs	r3, #128
 2201 004a 5B00     		lsls	r3, r3, #1
 2202 004c 1F42     		tst	r7, r3
 2203 004e 0AD0     		beq	.L168
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2204              		.loc 1 1751 0
 2205 0050 2A68     		ldr	r2, [r5]
 2206 0052 9360     		str	r3, [r2, #8]
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 2207              		.loc 1 1753 0
 2208 0054 BB05     		lsls	r3, r7, #22
 2209 0056 00D5     		bpl	.LCB1943
 2210 0058 B7E0     		b	.L289	@long jump
 2211              	.LCB1943:
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2212              		.loc 1 1766 0
 2213 005a 7B05     		lsls	r3, r7, #21
 2214 005c 00D4     		bmi	.LCB1947
 2215 005e C2E0     		b	.L170	@long jump
 2216              	.LCB1947:
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
 2217              		.loc 1 1769 0
 2218 0060 8023     		movs	r3, #128
 2219 0062 9B01     		lsls	r3, r3, #6
 2220 0064 1E43     		orrs	r6, r3
 2221              	.LVL186:
 2222              	.L168:
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2223              		.loc 1 1791 0
 2224 0066 8023     		movs	r3, #128
 2225 0068 5B02     		lsls	r3, r3, #9
 2226 006a 1F42     		tst	r7, r3
 2227 006c 00D0     		beq	.LCB1962
ARM GAS  /tmp/ccr0EAiD.s 			page 84


 2228 006e 7EE0     		b	.L290	@long jump
 2229              	.LCB1962:
 2230              	.LVL187:
 2231              	.L165:
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2232              		.loc 1 1835 0
 2233 0070 2307     		lsls	r3, r4, #28
 2234 0072 04D5     		bpl	.L175
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2235              		.loc 1 1837 0
 2236 0074 1023     		movs	r3, #16
 2237 0076 5246     		mov	r2, r10
 2238 0078 1342     		tst	r3, r2
 2239 007a 00D0     		beq	.LCB1974
 2240 007c 71E0     		b	.L291	@long jump
 2241              	.LCB1974:
 2242              	.L175:
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2243              		.loc 1 1848 0
 2244 007e 6307     		lsls	r3, r4, #29
 2245 0080 04D5     		bpl	.L176
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2246              		.loc 1 1850 0
 2247 0082 0823     		movs	r3, #8
 2248 0084 5246     		mov	r2, r10
 2249 0086 1342     		tst	r3, r2
 2250 0088 00D0     		beq	.LCB1988
 2251 008a 94E0     		b	.L292	@long jump
 2252              	.LCB1988:
 2253              	.L176:
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2254              		.loc 1 1867 0
 2255 008c A307     		lsls	r3, r4, #30
 2256 008e 04D5     		bpl	.L177
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2257              		.loc 1 1870 0
 2258 0090 2B68     		ldr	r3, [r5]
 2259 0092 DB68     		ldr	r3, [r3, #12]
 2260 0094 9B07     		lsls	r3, r3, #30
 2261 0096 00D0     		beq	.LCB2000
 2262 0098 79E0     		b	.L293	@long jump
 2263              	.LCB2000:
 2264              	.L177:
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2265              		.loc 1 1884 0
 2266 009a 6306     		lsls	r3, r4, #25
 2267 009c 03D5     		bpl	.L178
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2268              		.loc 1 1886 0
 2269 009e 1023     		movs	r3, #16
 2270 00a0 4A46     		mov	r2, r9
 2271 00a2 1342     		tst	r3, r2
 2272 00a4 57D1     		bne	.L294
 2273              	.L178:
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2274              		.loc 1 1897 0
 2275 00a6 A306     		lsls	r3, r4, #26
ARM GAS  /tmp/ccr0EAiD.s 			page 85


 2276 00a8 03D5     		bpl	.L179
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2277              		.loc 1 1899 0
 2278 00aa 0823     		movs	r3, #8
 2279 00ac 4A46     		mov	r2, r9
 2280 00ae 1342     		tst	r3, r2
 2281 00b0 67D1     		bne	.L295
 2282              	.L179:
1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2283              		.loc 1 1916 0
 2284 00b2 E306     		lsls	r3, r4, #27
 2285 00b4 03D5     		bpl	.L180
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2286              		.loc 1 1919 0
 2287 00b6 2B68     		ldr	r3, [r5]
 2288 00b8 1B69     		ldr	r3, [r3, #16]
 2289 00ba 9B07     		lsls	r3, r3, #30
 2290 00bc 6BD1     		bne	.L296
 2291              	.L180:
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2292              		.loc 1 1933 0
 2293 00be A303     		lsls	r3, r4, #14
 2294 00c0 03D5     		bpl	.L181
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2295              		.loc 1 1935 0
 2296 00c2 1023     		movs	r3, #16
 2297 00c4 4246     		mov	r2, r8
 2298 00c6 1342     		tst	r3, r2
 2299 00c8 69D1     		bne	.L297
 2300              	.L181:
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2301              		.loc 1 1952 0
 2302 00ca E303     		lsls	r3, r4, #15
 2303 00cc 03D5     		bpl	.L182
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2304              		.loc 1 1954 0
 2305 00ce 0823     		movs	r3, #8
 2306 00d0 4246     		mov	r2, r8
 2307 00d2 1342     		tst	r3, r2
 2308 00d4 69D1     		bne	.L298
 2309              	.L182:
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2310              		.loc 1 1971 0
 2311 00d6 2304     		lsls	r3, r4, #16
 2312 00d8 05D5     		bpl	.L183
1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2313              		.loc 1 1973 0
 2314 00da 4346     		mov	r3, r8
 2315 00dc 5B07     		lsls	r3, r3, #29
 2316 00de 10D4     		bmi	.L299
 2317              	.L286:
 2318 00e0 2B68     		ldr	r3, [r5]
 2319              	.L185:
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 2320              		.loc 1 2045 0
 2321 00e2 0422     		movs	r2, #4
 2322 00e4 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccr0EAiD.s 			page 86


 2323              	.L183:
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
 2324              		.loc 1 2049 0
 2325 00e6 002E     		cmp	r6, #0
 2326 00e8 05D0     		beq	.L164
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2327              		.loc 1 2052 0
 2328 00ea 6B6A     		ldr	r3, [r5, #36]
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2329              		.loc 1 2060 0
 2330 00ec 2800     		movs	r0, r5
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2331              		.loc 1 2052 0
 2332 00ee 1E43     		orrs	r6, r3
 2333              	.LVL188:
 2334 00f0 6E62     		str	r6, [r5, #36]
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2335              		.loc 1 2060 0
 2336 00f2 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2337              	.LVL189:
 2338              	.L164:
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2339              		.loc 1 2063 0
 2340              		@ sp needed
 2341              	.LVL190:
 2342              	.LVL191:
 2343              	.LVL192:
 2344              	.LVL193:
 2345              	.LVL194:
 2346              	.LVL195:
 2347              	.LVL196:
 2348 00f6 3CBC     		pop	{r2, r3, r4, r5}
 2349 00f8 9046     		mov	r8, r2
 2350 00fa 9946     		mov	r9, r3
 2351 00fc A246     		mov	r10, r4
 2352 00fe AB46     		mov	fp, r5
 2353 0100 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2354              	.LVL197:
 2355              	.L299:
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2356              		.loc 1 1976 0
 2357 0102 E305     		lsls	r3, r4, #23
 2358 0104 04D5     		bpl	.L186
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2359              		.loc 1 1976 0 is_stmt 0 discriminator 1
 2360 0106 0123     		movs	r3, #1
 2361 0108 5A46     		mov	r2, fp
 2362 010a 1342     		tst	r3, r2
 2363 010c 00D0     		beq	.L186
 2364              	.LVL198:
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2365              		.loc 1 1980 0 is_stmt 1
 2366 010e 1E43     		orrs	r6, r3
 2367              	.LVL199:
 2368              	.L186:
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2369              		.loc 1 1986 0
ARM GAS  /tmp/ccr0EAiD.s 			page 87


 2370 0110 A305     		lsls	r3, r4, #22
 2371 0112 04D5     		bpl	.L187
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2372              		.loc 1 1986 0 is_stmt 0 discriminator 1
 2373 0114 0223     		movs	r3, #2
 2374 0116 5A46     		mov	r2, fp
 2375 0118 1342     		tst	r3, r2
 2376 011a 00D0     		beq	.L187
 2377              	.LVL200:
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2378              		.loc 1 1990 0 is_stmt 1
 2379 011c 1E43     		orrs	r6, r3
 2380              	.LVL201:
 2381              	.L187:
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2382              		.loc 1 1996 0
 2383 011e 6305     		lsls	r3, r4, #21
 2384 0120 04D5     		bpl	.L188
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2385              		.loc 1 1996 0 is_stmt 0 discriminator 1
 2386 0122 0423     		movs	r3, #4
 2387 0124 5A46     		mov	r2, fp
 2388 0126 1342     		tst	r3, r2
 2389 0128 00D0     		beq	.L188
 2390              	.LVL202:
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2391              		.loc 1 2000 0 is_stmt 1
 2392 012a 1E43     		orrs	r6, r3
 2393              	.LVL203:
 2394              	.L188:
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2395              		.loc 1 2006 0
 2396 012c 2305     		lsls	r3, r4, #20
 2397 012e D7D5     		bpl	.L286
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 2398              		.loc 1 2007 0 discriminator 1
 2399 0130 7023     		movs	r3, #112
 2400 0132 5A46     		mov	r2, fp
 2401 0134 1340     		ands	r3, r2
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2402              		.loc 1 2006 0 discriminator 1
 2403 0136 D3D0     		beq	.L286
 2404              	.LVL204:
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2405              		.loc 1 2009 0
 2406 0138 302B     		cmp	r3, #48
 2407 013a 70D0     		beq	.L192
 2408 013c 59D9     		bls	.L300
 2409 013e 502B     		cmp	r3, #80
 2410 0140 73D0     		beq	.L196
 2411 0142 602B     		cmp	r3, #96
 2412 0144 67D0     		beq	.L197
 2413 0146 402B     		cmp	r3, #64
 2414 0148 67D0     		beq	.L284
 2415              	.L191:
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       }
 2416              		.loc 1 2040 0
ARM GAS  /tmp/ccr0EAiD.s 			page 88


 2417 014a 7021     		movs	r1, #112
 2418 014c 2B68     		ldr	r3, [r5]
 2419 014e 9A69     		ldr	r2, [r3, #24]
 2420              	.LVL205:
 2421 0150 8A43     		bics	r2, r1
 2422 0152 9A61     		str	r2, [r3, #24]
 2423 0154 C5E7     		b	.L185
 2424              	.LVL206:
 2425              	.L294:
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2426              		.loc 1 1889 0
 2427 0156 8022     		movs	r2, #128
 2428              	.LVL207:
 2429 0158 D200     		lsls	r2, r2, #3
 2430 015a 1643     		orrs	r6, r2
 2431              	.LVL208:
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 2432              		.loc 1 1892 0
 2433 015c 2A68     		ldr	r2, [r5]
 2434 015e 1361     		str	r3, [r2, #16]
 2435 0160 A1E7     		b	.L178
 2436              	.LVL209:
 2437              	.L291:
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2438              		.loc 1 1840 0
 2439 0162 8022     		movs	r2, #128
 2440              	.LVL210:
 2441 0164 9200     		lsls	r2, r2, #2
 2442 0166 1643     		orrs	r6, r2
 2443              	.LVL211:
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 2444              		.loc 1 1843 0
 2445 0168 2A68     		ldr	r2, [r5]
 2446 016a D360     		str	r3, [r2, #12]
 2447 016c 87E7     		b	.L175
 2448              	.L290:
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2449              		.loc 1 1794 0
 2450 016e 2A68     		ldr	r2, [r5]
 2451 0170 9360     		str	r3, [r2, #8]
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       {
 2452              		.loc 1 1796 0
 2453 0172 BA03     		lsls	r2, r7, #14
 2454 0174 25D4     		bmi	.L301
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2455              		.loc 1 1809 0
 2456 0176 7A03     		lsls	r2, r7, #13
 2457 0178 31D5     		bpl	.L173
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
 2458              		.loc 1 1812 0
 2459 017a 8023     		movs	r3, #128
 2460 017c 1B02     		lsls	r3, r3, #8
 2461 017e 1E43     		orrs	r6, r3
 2462              	.LVL212:
 2463 0180 76E7     		b	.L165
 2464              	.LVL213:
 2465              	.L295:
ARM GAS  /tmp/ccr0EAiD.s 			page 89


1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2466              		.loc 1 1902 0
 2467 0182 2A68     		ldr	r2, [r5]
 2468              	.LVL214:
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2469              		.loc 1 1910 0
 2470 0184 2800     		movs	r0, r5
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2471              		.loc 1 1902 0
 2472 0186 1361     		str	r3, [r2, #16]
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2473              		.loc 1 1910 0
 2474 0188 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2475              	.LVL215:
 2476 018c 91E7     		b	.L179
 2477              	.L293:
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2478              		.loc 1 1878 0
 2479 018e 2800     		movs	r0, r5
 2480 0190 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2481              	.LVL216:
 2482 0194 81E7     		b	.L177
 2483              	.L296:
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2484              		.loc 1 1927 0
 2485 0196 2800     		movs	r0, r5
 2486 0198 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2487              	.LVL217:
 2488 019c 8FE7     		b	.L180
 2489              	.LVL218:
 2490              	.L297:
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2491              		.loc 1 1938 0
 2492 019e 2A68     		ldr	r2, [r5]
 2493              	.LVL219:
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2494              		.loc 1 1946 0
 2495 01a0 2800     		movs	r0, r5
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2496              		.loc 1 1938 0
 2497 01a2 5360     		str	r3, [r2, #4]
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2498              		.loc 1 1946 0
 2499 01a4 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2500              	.LVL220:
 2501 01a8 8FE7     		b	.L181
 2502              	.LVL221:
 2503              	.L298:
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2504              		.loc 1 1957 0
 2505 01aa 2A68     		ldr	r2, [r5]
 2506              	.LVL222:
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2507              		.loc 1 1965 0
 2508 01ac 2800     		movs	r0, r5
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2509              		.loc 1 1957 0
ARM GAS  /tmp/ccr0EAiD.s 			page 90


 2510 01ae 5360     		str	r3, [r2, #4]
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2511              		.loc 1 1965 0
 2512 01b0 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2513              	.LVL223:
 2514 01b4 8FE7     		b	.L182
 2515              	.LVL224:
 2516              	.L292:
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2517              		.loc 1 1853 0
 2518 01b6 2A68     		ldr	r2, [r5]
 2519              	.LVL225:
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2520              		.loc 1 1861 0
 2521 01b8 2800     		movs	r0, r5
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
 2522              		.loc 1 1853 0
 2523 01ba D360     		str	r3, [r2, #12]
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2524              		.loc 1 1861 0
 2525 01bc FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2526              	.LVL226:
 2527 01c0 64E7     		b	.L176
 2528              	.L301:
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2529              		.loc 1 1804 0
 2530 01c2 2800     		movs	r0, r5
 2531 01c4 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2532              	.LVL227:
 2533 01c8 52E7     		b	.L165
 2534              	.L289:
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2535              		.loc 1 1761 0
 2536 01ca 2800     		movs	r0, r5
 2537 01cc FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2538              	.LVL228:
 2539 01d0 49E7     		b	.L168
 2540              	.LVL229:
 2541              	.L287:
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2542              		.loc 1 1718 0
 2543 01d2 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2544              	.LVL230:
 2545 01d6 37E7     		b	.L166
 2546              	.LVL231:
 2547              	.L202:
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
 2548              		.loc 1 1726 0
 2549 01d8 8026     		movs	r6, #128
 2550 01da 3601     		lsls	r6, r6, #4
 2551 01dc 34E7     		b	.L166
 2552              	.LVL232:
 2553              	.L173:
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2554              		.loc 1 1814 0
 2555 01de 3A03     		lsls	r2, r7, #12
 2556 01e0 15D5     		bpl	.L174
ARM GAS  /tmp/ccr0EAiD.s 			page 91


1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
 2557              		.loc 1 1817 0
 2558 01e2 1E43     		orrs	r6, r3
 2559              	.LVL233:
 2560 01e4 44E7     		b	.L165
 2561              	.L170:
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2562              		.loc 1 1771 0
 2563 01e6 3B05     		lsls	r3, r7, #20
 2564 01e8 0DD5     		bpl	.L171
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         }
 2565              		.loc 1 1774 0
 2566 01ea 8023     		movs	r3, #128
 2567 01ec DB01     		lsls	r3, r3, #7
 2568 01ee 1E43     		orrs	r6, r3
 2569              	.LVL234:
 2570 01f0 39E7     		b	.L168
 2571              	.LVL235:
 2572              	.L300:
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****         {
 2573              		.loc 1 2009 0
 2574 01f2 102B     		cmp	r3, #16
 2575 01f4 16D0     		beq	.L194
 2576 01f6 202B     		cmp	r3, #32
 2577 01f8 A7D1     		bne	.L191
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
 2578              		.loc 1 2017 0
 2579 01fa 1023     		movs	r3, #16
 2580 01fc 1E43     		orrs	r6, r3
 2581              	.LVL236:
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2582              		.loc 1 2018 0
 2583 01fe A4E7     		b	.L191
 2584              	.LVL237:
 2585              	.L288:
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2586              		.loc 1 1741 0
 2587 0200 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2588              	.LVL238:
 2589 0204 20E7     		b	.L166
 2590              	.LVL239:
 2591              	.L171:
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2592              		.loc 1 1784 0
 2593 0206 2800     		movs	r0, r5
 2594 0208 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2595              	.LVL240:
 2596 020c 2BE7     		b	.L168
 2597              	.L174:
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2598              		.loc 1 1827 0
 2599 020e 2800     		movs	r0, r5
 2600 0210 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2601              	.LVL241:
 2602 0214 2CE7     		b	.L165
 2603              	.LVL242:
 2604              	.L197:
ARM GAS  /tmp/ccr0EAiD.s 			page 92


2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
 2605              		.loc 1 2033 0
 2606 0216 8023     		movs	r3, #128
 2607 0218 5B00     		lsls	r3, r3, #1
 2608              	.L284:
 2609 021a 1E43     		orrs	r6, r3
 2610              	.LVL243:
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           default:
 2611              		.loc 1 2034 0
 2612 021c 95E7     		b	.L191
 2613              	.L192:
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
 2614              		.loc 1 2021 0
 2615 021e 2023     		movs	r3, #32
 2616 0220 1E43     		orrs	r6, r3
 2617              	.LVL244:
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2618              		.loc 1 2022 0
 2619 0222 92E7     		b	.L191
 2620              	.L194:
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
 2621              		.loc 1 2013 0
 2622 0224 0823     		movs	r3, #8
 2623 0226 1E43     		orrs	r6, r3
 2624              	.LVL245:
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2625              		.loc 1 2014 0
 2626 0228 8FE7     		b	.L191
 2627              	.L196:
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             break;
 2628              		.loc 1 2029 0
 2629 022a 8023     		movs	r3, #128
 2630 022c 1E43     		orrs	r6, r3
 2631              	.LVL246:
2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2632              		.loc 1 2030 0
 2633 022e 8CE7     		b	.L191
 2634              		.cfi_endproc
 2635              	.LFE59:
 2637              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2638              		.align	2
 2639              		.global	HAL_CAN_GetState
 2640              		.code	16
 2641              		.thumb_func
 2643              	HAL_CAN_GetState:
 2644              	.LFB73:
2314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @}
2317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****  *
2322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @verbatim
2323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
2324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****             ##### Peripheral State and Error functions #####
ARM GAS  /tmp/ccr0EAiD.s 			page 93


2325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   ==============================================================================
2326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     [..]
2327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     This subsection provides functions allowing to :
2328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** @endverbatim
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @{
2334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Return the CAN state.
2338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL state
2341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
2343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 2645              		.loc 1 2343 0
 2646              		.cfi_startproc
 2647              		@ args = 0, pretend = 0, frame = 0
 2648              		@ frame_needed = 0, uses_anonymous_args = 0
 2649              		@ link register save eliminated.
 2650              	.LVL247:
2344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2651              		.loc 1 2344 0
 2652 0000 2023     		movs	r3, #32
 2653 0002 C35C     		ldrb	r3, [r0, r3]
2343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2654              		.loc 1 2343 0
 2655 0004 0200     		movs	r2, r0
 2656              		.loc 1 2344 0
 2657 0006 D8B2     		uxtb	r0, r3
 2658              	.LVL248:
2345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2659              		.loc 1 2346 0
 2660 0008 431E     		subs	r3, r0, #1
 2661 000a 012B     		cmp	r3, #1
 2662 000c 00D9     		bls	.L308
 2663              	.LVL249:
 2664              	.L303:
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
2349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
2351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
2352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Sleep mode is active */
2353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
2355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Check sleep mode request flag */
2356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
2357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
2358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Sleep mode request is pending */
2359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
2360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
ARM GAS  /tmp/ccr0EAiD.s 			page 94


2361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     else
2362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
2363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
2365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
2366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return CAN state */
2368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return state;
2369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 2665              		.loc 1 2369 0
 2666              		@ sp needed
 2667 000e 7047     		bx	lr
 2668              	.LVL250:
 2669              	.L308:
2350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2670              		.loc 1 2350 0
 2671 0010 0223     		movs	r3, #2
 2672 0012 1268     		ldr	r2, [r2]
 2673              	.LVL251:
 2674 0014 5168     		ldr	r1, [r2, #4]
 2675 0016 0B42     		tst	r3, r1
 2676 0018 01D0     		beq	.L309
2353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 2677              		.loc 1 2353 0
 2678 001a 0420     		movs	r0, #4
 2679              	.LVL252:
 2680 001c F7E7     		b	.L303
 2681              	.LVL253:
 2682              	.L309:
2356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     {
 2683              		.loc 1 2356 0
 2684 001e 1268     		ldr	r2, [r2]
 2685 0020 1342     		tst	r3, r2
 2686 0022 F4D0     		beq	.L303
2359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     }
 2687              		.loc 1 2359 0
 2688 0024 0320     		movs	r0, #3
 2689              	.LVL254:
 2690 0026 F2E7     		b	.L303
 2691              		.cfi_endproc
 2692              	.LFE73:
 2694              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2695              		.align	2
 2696              		.global	HAL_CAN_GetError
 2697              		.code	16
 2698              		.thumb_func
 2700              	HAL_CAN_GetError:
 2701              	.LFB74:
2370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Return the CAN error code.
2373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval CAN Error Code
2376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
2378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
ARM GAS  /tmp/ccr0EAiD.s 			page 95


 2702              		.loc 1 2378 0
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 0
 2705              		@ frame_needed = 0, uses_anonymous_args = 0
 2706              		@ link register save eliminated.
 2707              	.LVL255:
2379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return CAN error code */
2380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return hcan->ErrorCode;
 2708              		.loc 1 2380 0
 2709 0000 406A     		ldr	r0, [r0, #36]
 2710              	.LVL256:
2381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 2711              		.loc 1 2381 0
 2712              		@ sp needed
 2713 0002 7047     		bx	lr
 2714              		.cfi_endproc
 2715              	.LFE74:
 2717              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2718              		.align	2
 2719              		.global	HAL_CAN_ResetError
 2720              		.code	16
 2721              		.thumb_func
 2723              	HAL_CAN_ResetError:
 2724              	.LFB75:
2382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** /**
2384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @brief  Reset the CAN error code.
2385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   *         the configuration information for the specified CAN.
2387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   * @retval HAL status
2388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   */
2389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** {
 2725              		.loc 1 2390 0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 0
 2728              		@ frame_needed = 0, uses_anonymous_args = 0
 2729              		@ link register save eliminated.
 2730              	.LVL257:
2391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
2392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2731              		.loc 1 2392 0
 2732 0000 2023     		movs	r3, #32
 2733 0002 C35C     		ldrb	r3, [r0, r3]
 2734              	.LVL258:
2393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2735              		.loc 1 2394 0
 2736 0004 013B     		subs	r3, r3, #1
 2737              	.LVL259:
 2738 0006 012B     		cmp	r3, #1
 2739 0008 06D9     		bls	.L314
2395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
2397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Reset CAN error code */
2398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode = 0U;
2399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
ARM GAS  /tmp/ccr0EAiD.s 			page 96


2400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   else
2401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   {
2402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     /* Update error code */
2403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2740              		.loc 1 2403 0
 2741 000a 8022     		movs	r2, #128
 2742 000c 436A     		ldr	r3, [r0, #36]
 2743 000e D202     		lsls	r2, r2, #11
 2744 0010 1343     		orrs	r3, r2
 2745 0012 4362     		str	r3, [r0, #36]
 2746              	.LVL260:
2404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****     status = HAL_ERROR;
 2747              		.loc 1 2405 0
 2748 0014 0120     		movs	r0, #1
 2749              	.LVL261:
 2750              	.L313:
2406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
2407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** 
2408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   /* Return the status */
2409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   return status;
2410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c **** }
 2751              		.loc 1 2410 0
 2752              		@ sp needed
 2753 0016 7047     		bx	lr
 2754              	.LVL262:
 2755              	.L314:
2398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   }
 2756              		.loc 1 2398 0
 2757 0018 0023     		movs	r3, #0
 2758 001a 4362     		str	r3, [r0, #36]
2391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2759              		.loc 1 2391 0
 2760 001c 0020     		movs	r0, #0
 2761              	.LVL263:
 2762 001e FAE7     		b	.L313
 2763              		.cfi_endproc
 2764              	.LFE75:
 2766              		.text
 2767              	.Letext0:
 2768              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 2769              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2770              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 2771              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2772              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2773              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_can.h"
 2774              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccr0EAiD.s 			page 97


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_hal_can.c
     /tmp/ccr0EAiD.s:20     .text.HAL_CAN_MspInit:00000000 $t
     /tmp/ccr0EAiD.s:25     .text.HAL_CAN_MspInit:00000000 HAL_CAN_MspInit
     /tmp/ccr0EAiD.s:37     .text.HAL_CAN_Init:00000000 $t
     /tmp/ccr0EAiD.s:42     .text.HAL_CAN_Init:00000000 HAL_CAN_Init
     /tmp/ccr0EAiD.s:296    .text.HAL_CAN_MspDeInit:00000000 $t
     /tmp/ccr0EAiD.s:301    .text.HAL_CAN_MspDeInit:00000000 HAL_CAN_MspDeInit
     /tmp/ccr0EAiD.s:313    .text.HAL_CAN_ConfigFilter:00000000 $t
     /tmp/ccr0EAiD.s:318    .text.HAL_CAN_ConfigFilter:00000000 HAL_CAN_ConfigFilter
     /tmp/ccr0EAiD.s:530    .text.HAL_CAN_Start:00000000 $t
     /tmp/ccr0EAiD.s:535    .text.HAL_CAN_Start:00000000 HAL_CAN_Start
     /tmp/ccr0EAiD.s:633    .text.HAL_CAN_Stop:00000000 $t
     /tmp/ccr0EAiD.s:638    .text.HAL_CAN_Stop:00000000 HAL_CAN_Stop
     /tmp/ccr0EAiD.s:745    .text.HAL_CAN_DeInit:00000000 $t
     /tmp/ccr0EAiD.s:750    .text.HAL_CAN_DeInit:00000000 HAL_CAN_DeInit
     /tmp/ccr0EAiD.s:806    .text.HAL_CAN_RequestSleep:00000000 $t
     /tmp/ccr0EAiD.s:811    .text.HAL_CAN_RequestSleep:00000000 HAL_CAN_RequestSleep
     /tmp/ccr0EAiD.s:859    .text.HAL_CAN_WakeUp:00000000 $t
     /tmp/ccr0EAiD.s:864    .text.HAL_CAN_WakeUp:00000000 HAL_CAN_WakeUp
     /tmp/ccr0EAiD.s:955    .text.HAL_CAN_WakeUp:00000058 $d
     /tmp/ccr0EAiD.s:960    .text.HAL_CAN_IsSleepActive:00000000 $t
     /tmp/ccr0EAiD.s:965    .text.HAL_CAN_IsSleepActive:00000000 HAL_CAN_IsSleepActive
     /tmp/ccr0EAiD.s:1003   .text.HAL_CAN_AddTxMessage:00000000 $t
     /tmp/ccr0EAiD.s:1008   .text.HAL_CAN_AddTxMessage:00000000 HAL_CAN_AddTxMessage
     /tmp/ccr0EAiD.s:1201   .text.HAL_CAN_AbortTxRequest:00000000 $t
     /tmp/ccr0EAiD.s:1206   .text.HAL_CAN_AbortTxRequest:00000000 HAL_CAN_AbortTxRequest
     /tmp/ccr0EAiD.s:1288   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 $t
     /tmp/ccr0EAiD.s:1293   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccr0EAiD.s:1349   .text.HAL_CAN_IsTxMessagePending:00000000 $t
     /tmp/ccr0EAiD.s:1354   .text.HAL_CAN_IsTxMessagePending:00000000 HAL_CAN_IsTxMessagePending
     /tmp/ccr0EAiD.s:1393   .text.HAL_CAN_GetTxTimestamp:00000000 $t
     /tmp/ccr0EAiD.s:1398   .text.HAL_CAN_GetTxTimestamp:00000000 HAL_CAN_GetTxTimestamp
     /tmp/ccr0EAiD.s:1468   .text.HAL_CAN_GetRxMessage:00000000 $t
     /tmp/ccr0EAiD.s:1473   .text.HAL_CAN_GetRxMessage:00000000 HAL_CAN_GetRxMessage
     /tmp/ccr0EAiD.s:1716   .text.HAL_CAN_GetRxFifoFillLevel:00000000 $t
     /tmp/ccr0EAiD.s:1721   .text.HAL_CAN_GetRxFifoFillLevel:00000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccr0EAiD.s:1774   .text.HAL_CAN_ActivateNotification:00000000 $t
     /tmp/ccr0EAiD.s:1779   .text.HAL_CAN_ActivateNotification:00000000 HAL_CAN_ActivateNotification
     /tmp/ccr0EAiD.s:1827   .text.HAL_CAN_DeactivateNotification:00000000 $t
     /tmp/ccr0EAiD.s:1832   .text.HAL_CAN_DeactivateNotification:00000000 HAL_CAN_DeactivateNotification
     /tmp/ccr0EAiD.s:1879   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 $t
     /tmp/ccr0EAiD.s:1884   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccr0EAiD.s:1896   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 $t
     /tmp/ccr0EAiD.s:1901   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccr0EAiD.s:1913   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 $t
     /tmp/ccr0EAiD.s:1918   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccr0EAiD.s:1930   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 $t
     /tmp/ccr0EAiD.s:1935   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccr0EAiD.s:1947   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 $t
     /tmp/ccr0EAiD.s:1952   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccr0EAiD.s:1964   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 $t
     /tmp/ccr0EAiD.s:1969   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccr0EAiD.s:1981   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/ccr0EAiD.s:1986   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccr0EAiD.s:1998   .text.HAL_CAN_RxFifo0FullCallback:00000000 $t
     /tmp/ccr0EAiD.s:2003   .text.HAL_CAN_RxFifo0FullCallback:00000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/ccr0EAiD.s 			page 98


     /tmp/ccr0EAiD.s:2015   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 $t
     /tmp/ccr0EAiD.s:2020   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccr0EAiD.s:2032   .text.HAL_CAN_RxFifo1FullCallback:00000000 $t
     /tmp/ccr0EAiD.s:2037   .text.HAL_CAN_RxFifo1FullCallback:00000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccr0EAiD.s:2049   .text.HAL_CAN_SleepCallback:00000000 $t
     /tmp/ccr0EAiD.s:2054   .text.HAL_CAN_SleepCallback:00000000 HAL_CAN_SleepCallback
     /tmp/ccr0EAiD.s:2066   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 $t
     /tmp/ccr0EAiD.s:2071   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccr0EAiD.s:2083   .text.HAL_CAN_ErrorCallback:00000000 $t
     /tmp/ccr0EAiD.s:2088   .text.HAL_CAN_ErrorCallback:00000000 HAL_CAN_ErrorCallback
     /tmp/ccr0EAiD.s:2103   .text.HAL_CAN_IRQHandler:00000000 $t
     /tmp/ccr0EAiD.s:2108   .text.HAL_CAN_IRQHandler:00000000 HAL_CAN_IRQHandler
     /tmp/ccr0EAiD.s:2638   .text.HAL_CAN_GetState:00000000 $t
     /tmp/ccr0EAiD.s:2643   .text.HAL_CAN_GetState:00000000 HAL_CAN_GetState
     /tmp/ccr0EAiD.s:2695   .text.HAL_CAN_GetError:00000000 $t
     /tmp/ccr0EAiD.s:2700   .text.HAL_CAN_GetError:00000000 HAL_CAN_GetError
     /tmp/ccr0EAiD.s:2718   .text.HAL_CAN_ResetError:00000000 $t
     /tmp/ccr0EAiD.s:2723   .text.HAL_CAN_ResetError:00000000 HAL_CAN_ResetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
