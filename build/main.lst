ARM GAS  /tmp/ccUBSKdi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SystemClock_Config,"ax",%progbits
  20              		.align	2
  21              		.global	SystemClock_Config
  22              		.code	16
  23              		.thumb_func
  25              	SystemClock_Config:
  26              	.LFB42:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usb_device.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "usbd_cdc_if.h"
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccUBSKdi.s 			page 2


  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** CAN_HandleTypeDef hcan;
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN PV */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PV */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  52:Src/main.c    **** void SystemClock_Config(void);
  53:Src/main.c    **** static void MX_GPIO_Init(void);
  54:Src/main.c    **** static void MX_CAN_Init(void);
  55:Src/main.c    **** /* USER CODE BEGIN PFP */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PFP */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN 0 */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END 0 */
  63:Src/main.c    **** 
  64:Src/main.c    **** /**
  65:Src/main.c    ****   * @brief  The application entry point.
  66:Src/main.c    ****   * @retval int
  67:Src/main.c    ****   */
  68:Src/main.c    **** int main(void)
  69:Src/main.c    **** {
  70:Src/main.c    ****   /* USER CODE BEGIN 1 */
  71:Src/main.c    **** 
  72:Src/main.c    ****   /* USER CODE END 1 */
  73:Src/main.c    ****   
  74:Src/main.c    **** 
  75:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  76:Src/main.c    **** 
  77:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  78:Src/main.c    ****   HAL_Init();
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* USER CODE BEGIN Init */
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* USER CODE END Init */
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* Configure the system clock */
  85:Src/main.c    ****   SystemClock_Config();
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  88:Src/main.c    **** 
ARM GAS  /tmp/ccUBSKdi.s 			page 3


  89:Src/main.c    ****   /* USER CODE END SysInit */
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* Initialize all configured peripherals */
  92:Src/main.c    ****   MX_GPIO_Init();
  93:Src/main.c    ****   MX_USB_DEVICE_Init();
  94:Src/main.c    ****   MX_CAN_Init();
  95:Src/main.c    ****   /* USER CODE BEGIN 2 */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END 2 */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Infinite loop */
 100:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 101:Src/main.c    **** 
 102:Src/main.c    ****   while (1)
 103:Src/main.c    ****   {
 104:Src/main.c    ****     /* USER CODE END WHILE */
 105:Src/main.c    **** 
 106:Src/main.c    ****     /* USER CODE BEGIN 3 */
 107:Src/main.c    ****   }
 108:Src/main.c    ****   /* USER CODE END 3 */
 109:Src/main.c    **** }
 110:Src/main.c    **** 
 111:Src/main.c    **** /**
 112:Src/main.c    ****   * @brief System Clock Configuration
 113:Src/main.c    ****   * @retval None
 114:Src/main.c    ****   */
 115:Src/main.c    **** void SystemClock_Config(void)
 116:Src/main.c    **** {
  28              		.loc 1 116 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 96
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 98B0     		sub	sp, sp, #96
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 104
 117:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  40              		.loc 1 117 0
  41 0004 3422     		movs	r2, #52
  42 0006 0021     		movs	r1, #0
  43 0008 0BA8     		add	r0, sp, #44
  44 000a FFF7FEFF 		bl	memset
  45              	.LVL0:
 118:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  46              		.loc 1 118 0
  47 000e 1022     		movs	r2, #16
  48 0010 0021     		movs	r1, #0
  49 0012 01A8     		add	r0, sp, #4
  50 0014 FFF7FEFF 		bl	memset
  51              	.LVL1:
 119:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  52              		.loc 1 119 0
  53 0018 1822     		movs	r2, #24
ARM GAS  /tmp/ccUBSKdi.s 			page 4


  54 001a 0021     		movs	r1, #0
  55 001c 05A8     		add	r0, sp, #20
  56 001e FFF7FEFF 		bl	memset
  57              	.LVL2:
 120:Src/main.c    **** 
 121:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 122:Src/main.c    ****   */
 123:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  58              		.loc 1 123 0
  59 0022 0123     		movs	r3, #1
  60 0024 0B93     		str	r3, [sp, #44]
 124:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  61              		.loc 1 124 0
  62 0026 0C93     		str	r3, [sp, #48]
 125:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 126:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  63              		.loc 1 126 0
  64 0028 8023     		movs	r3, #128
  65 002a 5B02     		lsls	r3, r3, #9
  66 002c 1593     		str	r3, [sp, #84]
 127:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  67              		.loc 1 127 0
  68 002e 8023     		movs	r3, #128
 125:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  69              		.loc 1 125 0
  70 0030 0224     		movs	r4, #2
  71              		.loc 1 127 0
  72 0032 5B03     		lsls	r3, r3, #13
 128:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 129:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  73              		.loc 1 129 0
  74 0034 0BA8     		add	r0, sp, #44
 127:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  75              		.loc 1 127 0
  76 0036 1693     		str	r3, [sp, #88]
 125:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  77              		.loc 1 125 0
  78 0038 1494     		str	r4, [sp, #80]
  79              		.loc 1 129 0
  80 003a FFF7FEFF 		bl	HAL_RCC_OscConfig
  81              	.LVL3:
 130:Src/main.c    ****   {
 131:Src/main.c    ****     Error_Handler();
 132:Src/main.c    ****   }
 133:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 134:Src/main.c    ****   */
 135:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  82              		.loc 1 135 0
  83 003e 0723     		movs	r3, #7
  84 0040 0193     		str	r3, [sp, #4]
 136:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 137:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 138:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  85              		.loc 1 138 0
  86 0042 0023     		movs	r3, #0
 139:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 140:Src/main.c    **** 
ARM GAS  /tmp/ccUBSKdi.s 			page 5


 141:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  87              		.loc 1 141 0
  88 0044 0121     		movs	r1, #1
  89 0046 01A8     		add	r0, sp, #4
 138:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  90              		.loc 1 138 0
  91 0048 0393     		str	r3, [sp, #12]
 139:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  92              		.loc 1 139 0
  93 004a 0493     		str	r3, [sp, #16]
 137:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  94              		.loc 1 137 0
  95 004c 0294     		str	r4, [sp, #8]
  96              		.loc 1 141 0
  97 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
  98              	.LVL4:
 142:Src/main.c    ****   {
 143:Src/main.c    ****     Error_Handler();
 144:Src/main.c    ****   }
 145:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  99              		.loc 1 145 0
 100 0052 8023     		movs	r3, #128
 101 0054 9B02     		lsls	r3, r3, #10
 102 0056 0593     		str	r3, [sp, #20]
 146:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 103              		.loc 1 146 0
 104 0058 8023     		movs	r3, #128
 147:Src/main.c    **** 
 148:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 105              		.loc 1 148 0
 106 005a 05A8     		add	r0, sp, #20
 146:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 107              		.loc 1 146 0
 108 005c 0A93     		str	r3, [sp, #40]
 109              		.loc 1 148 0
 110 005e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 111              	.LVL5:
 149:Src/main.c    ****   {
 150:Src/main.c    ****     Error_Handler();
 151:Src/main.c    ****   }
 152:Src/main.c    **** }
 112              		.loc 1 152 0
 113 0062 18B0     		add	sp, sp, #96
 114              		@ sp needed
 115 0064 10BD     		pop	{r4, pc}
 116              		.cfi_endproc
 117              	.LFE42:
 119 0066 C046     		.section	.text.startup.main,"ax",%progbits
 120              		.align	2
 121              		.global	main
 122              		.code	16
 123              		.thumb_func
 125              	main:
 126              	.LFB41:
  69:Src/main.c    ****   /* USER CODE BEGIN 1 */
 127              		.loc 1 69 0
 128              		.cfi_startproc
ARM GAS  /tmp/ccUBSKdi.s 			page 6


 129              		@ Volatile: function does not return.
 130              		@ args = 0, pretend = 0, frame = 56
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132 0000 70B5     		push	{r4, r5, r6, lr}
 133              	.LCFI2:
 134              		.cfi_def_cfa_offset 16
 135              		.cfi_offset 4, -16
 136              		.cfi_offset 5, -12
 137              		.cfi_offset 6, -8
 138              		.cfi_offset 14, -4
 139 0002 8EB0     		sub	sp, sp, #56
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 72
  78:Src/main.c    **** 
 142              		.loc 1 78 0
 143 0004 FFF7FEFF 		bl	HAL_Init
 144              	.LVL6:
  85:Src/main.c    **** 
 145              		.loc 1 85 0
 146 0008 FFF7FEFF 		bl	SystemClock_Config
 147              	.LVL7:
 148              	.LBB17:
 149              	.LBB18:
 153:Src/main.c    **** 
 154:Src/main.c    **** /**
 155:Src/main.c    ****   * @brief CAN Initialization Function
 156:Src/main.c    ****   * @param None
 157:Src/main.c    ****   * @retval None
 158:Src/main.c    ****   */
 159:Src/main.c    **** static void MX_CAN_Init(void)
 160:Src/main.c    **** {
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 163:Src/main.c    ****   CAN_FilterTypeDef can_filter;
 164:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 167:Src/main.c    ****   // bitrates = 48Mhz/(Presaler*(CAN_BS1_nTQ+CAN_BS2_nTQ+1)) 
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 170:Src/main.c    ****   hcan.Instance = CAN;
 171:Src/main.c    ****   hcan.Init.Prescaler = 8;
 172:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 173:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 174:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 175:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 176:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 177:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 178:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 179:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 180:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 181:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 182:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 183:Src/main.c    ****   {
 184:Src/main.c    ****     Error_Handler();
 185:Src/main.c    ****   }
 186:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
ARM GAS  /tmp/ccUBSKdi.s 			page 7


 187:Src/main.c    ****   //config recv filter ,enable all ther recv
 188:Src/main.c    ****   can_filter.FilterBank = 0;
 189:Src/main.c    ****   can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 190:Src/main.c    ****   can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 191:Src/main.c    ****   can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 192:Src/main.c    ****   can_filter.FilterIdLow = 0;
 193:Src/main.c    ****   can_filter.FilterIdHigh = 0;
 194:Src/main.c    ****   can_filter.FilterMaskIdLow = 0;
 195:Src/main.c    ****   can_filter.FilterMaskIdHigh = 0;
 196:Src/main.c    ****   can_filter.FilterActivation = CAN_FILTER_ENABLE;
 197:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan,&can_filter);
 198:Src/main.c    ****   // enable can rx interrupt
 199:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 200:Src/main.c    ****   //default enable the can (enabled by slcan cmd)
 201:Src/main.c    ****   //HAL_CAN_Start(&hcan);
 202:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 203:Src/main.c    **** 
 204:Src/main.c    **** }
 205:Src/main.c    **** 
 206:Src/main.c    **** /**
 207:Src/main.c    ****   * @brief GPIO Initialization Function
 208:Src/main.c    ****   * @param None
 209:Src/main.c    ****   * @retval None
 210:Src/main.c    ****   */
 211:Src/main.c    **** static void MX_GPIO_Init(void)
 212:Src/main.c    **** {
 213:Src/main.c    **** 
 214:Src/main.c    ****   /* GPIO Ports Clock Enable */
 215:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 150              		.loc 1 215 0
 151 000c 8022     		movs	r2, #128
 152              	.LBE18:
 153              	.LBB19:
 216:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 154              		.loc 1 216 0
 155 000e 8026     		movs	r6, #128
 156              	.LBE19:
 157              	.LBB20:
 215:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 158              		.loc 1 215 0
 159 0010 214B     		ldr	r3, .L5
 160 0012 D203     		lsls	r2, r2, #15
 161 0014 5969     		ldr	r1, [r3, #20]
 162              	.LBE20:
 163              	.LBB21:
 164              		.loc 1 216 0
 165 0016 B602     		lsls	r6, r6, #10
 166              	.LBE21:
 167              	.LBB22:
 215:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 168              		.loc 1 215 0
 169 0018 1143     		orrs	r1, r2
 170 001a 5961     		str	r1, [r3, #20]
 171 001c 5969     		ldr	r1, [r3, #20]
 172              	.LBE22:
 173              	.LBE17:
 174              	.LBB26:
ARM GAS  /tmp/ccUBSKdi.s 			page 8


 175              	.LBB27:
 172:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 176              		.loc 1 172 0
 177 001e 0025     		movs	r5, #0
 178              	.LBE27:
 179              	.LBE26:
 180              	.LBB29:
 181              	.LBB23:
 215:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 182              		.loc 1 215 0
 183 0020 0A40     		ands	r2, r1
 184 0022 0192     		str	r2, [sp, #4]
 185 0024 019A     		ldr	r2, [sp, #4]
 186              	.LBE23:
 187              	.LBB24:
 188              		.loc 1 216 0
 189 0026 5A69     		ldr	r2, [r3, #20]
 190 0028 3243     		orrs	r2, r6
 191 002a 5A61     		str	r2, [r3, #20]
 192 002c 5A69     		ldr	r2, [r3, #20]
 193 002e 3240     		ands	r2, r6
 194 0030 0292     		str	r2, [sp, #8]
 195 0032 029A     		ldr	r2, [sp, #8]
 196              	.LBE24:
 197              	.LBB25:
 217:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 198              		.loc 1 217 0
 199 0034 8022     		movs	r2, #128
 200 0036 5969     		ldr	r1, [r3, #20]
 201 0038 D202     		lsls	r2, r2, #11
 202 003a 1143     		orrs	r1, r2
 203 003c 5961     		str	r1, [r3, #20]
 204 003e 5B69     		ldr	r3, [r3, #20]
 205 0040 1A40     		ands	r2, r3
 206 0042 0392     		str	r2, [sp, #12]
 207 0044 039B     		ldr	r3, [sp, #12]
 208              	.LBE25:
 209              	.LBE29:
  93:Src/main.c    ****   MX_CAN_Init();
 210              		.loc 1 93 0
 211 0046 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 212              	.LVL8:
 213              	.LBB30:
 214              	.LBB28:
 170:Src/main.c    ****   hcan.Init.Prescaler = 8;
 215              		.loc 1 170 0
 216 004a 144C     		ldr	r4, .L5+4
 217 004c 144B     		ldr	r3, .L5+8
 182:Src/main.c    ****   {
 218              		.loc 1 182 0
 219 004e 2000     		movs	r0, r4
 170:Src/main.c    ****   hcan.Init.Prescaler = 8;
 220              		.loc 1 170 0
 221 0050 2360     		str	r3, [r4]
 171:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 222              		.loc 1 171 0
 223 0052 0823     		movs	r3, #8
ARM GAS  /tmp/ccUBSKdi.s 			page 9


 224 0054 6360     		str	r3, [r4, #4]
 175:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 225              		.loc 1 175 0
 226 0056 8023     		movs	r3, #128
 227 0058 5B03     		lsls	r3, r3, #13
 228 005a 6361     		str	r3, [r4, #20]
 172:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 229              		.loc 1 172 0
 230 005c A560     		str	r5, [r4, #8]
 173:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 231              		.loc 1 173 0
 232 005e E560     		str	r5, [r4, #12]
 174:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 233              		.loc 1 174 0
 234 0060 2661     		str	r6, [r4, #16]
 176:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 235              		.loc 1 176 0
 236 0062 2576     		strb	r5, [r4, #24]
 177:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 237              		.loc 1 177 0
 238 0064 6576     		strb	r5, [r4, #25]
 178:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 239              		.loc 1 178 0
 240 0066 A576     		strb	r5, [r4, #26]
 179:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 241              		.loc 1 179 0
 242 0068 E576     		strb	r5, [r4, #27]
 180:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 243              		.loc 1 180 0
 244 006a 2577     		strb	r5, [r4, #28]
 181:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 245              		.loc 1 181 0
 246 006c 6577     		strb	r5, [r4, #29]
 182:Src/main.c    ****   {
 247              		.loc 1 182 0
 248 006e FFF7FEFF 		bl	HAL_CAN_Init
 249              	.LVL9:
 191:Src/main.c    ****   can_filter.FilterIdLow = 0;
 250              		.loc 1 191 0
 251 0072 0123     		movs	r3, #1
 197:Src/main.c    ****   // enable can rx interrupt
 252              		.loc 1 197 0
 253 0074 04A9     		add	r1, sp, #16
 254 0076 2000     		movs	r0, r4
 188:Src/main.c    ****   can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 255              		.loc 1 188 0
 256 0078 0995     		str	r5, [sp, #36]
 189:Src/main.c    ****   can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 257              		.loc 1 189 0
 258 007a 0895     		str	r5, [sp, #32]
 190:Src/main.c    ****   can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 259              		.loc 1 190 0
 260 007c 0A95     		str	r5, [sp, #40]
 191:Src/main.c    ****   can_filter.FilterIdLow = 0;
 261              		.loc 1 191 0
 262 007e 0B93     		str	r3, [sp, #44]
 192:Src/main.c    ****   can_filter.FilterIdHigh = 0;
ARM GAS  /tmp/ccUBSKdi.s 			page 10


 263              		.loc 1 192 0
 264 0080 0595     		str	r5, [sp, #20]
 193:Src/main.c    ****   can_filter.FilterMaskIdLow = 0;
 265              		.loc 1 193 0
 266 0082 0495     		str	r5, [sp, #16]
 194:Src/main.c    ****   can_filter.FilterMaskIdHigh = 0;
 267              		.loc 1 194 0
 268 0084 0795     		str	r5, [sp, #28]
 195:Src/main.c    ****   can_filter.FilterActivation = CAN_FILTER_ENABLE;
 269              		.loc 1 195 0
 270 0086 0695     		str	r5, [sp, #24]
 196:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan,&can_filter);
 271              		.loc 1 196 0
 272 0088 0C93     		str	r3, [sp, #48]
 197:Src/main.c    ****   // enable can rx interrupt
 273              		.loc 1 197 0
 274 008a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 275              	.LVL10:
 199:Src/main.c    ****   //default enable the can (enabled by slcan cmd)
 276              		.loc 1 199 0
 277 008e 0221     		movs	r1, #2
 278 0090 2000     		movs	r0, r4
 279 0092 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 280              	.LVL11:
 281              	.L3:
 282 0096 FEE7     		b	.L3
 283              	.L6:
 284              		.align	2
 285              	.L5:
 286 0098 00100240 		.word	1073876992
 287 009c 00000000 		.word	hcan
 288 00a0 00640040 		.word	1073767424
 289              	.LBE28:
 290              	.LBE30:
 291              		.cfi_endproc
 292              	.LFE41:
 294              		.section	.text.function_test,"ax",%progbits
 295              		.align	2
 296              		.global	function_test
 297              		.code	16
 298              		.thumb_func
 300              	function_test:
 301              	.LFB45:
 218:Src/main.c    **** 
 219:Src/main.c    **** }
 220:Src/main.c    **** 
 221:Src/main.c    **** /* USER CODE BEGIN 4 */
 222:Src/main.c    **** void function_test()
 223:Src/main.c    **** {
 302              		.loc 1 223 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 80
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 224:Src/main.c    ****     //usb serial test
 225:Src/main.c    ****     HAL_Delay(500);
 306              		.loc 1 225 0
 307 0000 FA20     		movs	r0, #250
ARM GAS  /tmp/ccUBSKdi.s 			page 11


 223:Src/main.c    ****     //usb serial test
 308              		.loc 1 223 0
 309 0002 10B5     		push	{r4, lr}
 310              	.LCFI4:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 4, -8
 313              		.cfi_offset 14, -4
 314              		.loc 1 225 0
 315 0004 4000     		lsls	r0, r0, #1
 223:Src/main.c    ****     //usb serial test
 316              		.loc 1 223 0
 317 0006 94B0     		sub	sp, sp, #80
 318              	.LCFI5:
 319              		.cfi_def_cfa_offset 88
 320              		.loc 1 225 0
 321 0008 FFF7FEFF 		bl	HAL_Delay
 322              	.LVL12:
 226:Src/main.c    ****     CDC_Transmit_FS((uint8_t*)"t1234DEADBEEF\r",14);
 323              		.loc 1 226 0
 324 000c 0E21     		movs	r1, #14
 325 000e 1F48     		ldr	r0, .L9
 326 0010 FFF7FEFF 		bl	CDC_Transmit_FS
 327              	.LVL13:
 227:Src/main.c    ****     HAL_Delay(500);
 328              		.loc 1 227 0
 329 0014 FA20     		movs	r0, #250
 330 0016 4000     		lsls	r0, r0, #1
 331 0018 FFF7FEFF 		bl	HAL_Delay
 332              	.LVL14:
 228:Src/main.c    ****     CDC_Transmit_FS((uint8_t*)"t1234DEADBEE8\r",14);
 333              		.loc 1 228 0
 334 001c 0E21     		movs	r1, #14
 335 001e 1C48     		ldr	r0, .L9+4
 336 0020 FFF7FEFF 		bl	CDC_Transmit_FS
 337              	.LVL15:
 229:Src/main.c    **** 
 230:Src/main.c    ****     //can test
 231:Src/main.c    ****     CAN_TxHeaderTypeDef can_tx_header;
 232:Src/main.c    ****     CAN_RxHeaderTypeDef can_rx_header;
 233:Src/main.c    ****     can_tx_header.DLC=8;
 338              		.loc 1 233 0
 339 0024 0823     		movs	r3, #8
 340 0026 0B93     		str	r3, [sp, #44]
 234:Src/main.c    ****     can_tx_header.IDE = CAN_ID_STD;
 341              		.loc 1 234 0
 342 0028 0023     		movs	r3, #0
 235:Src/main.c    ****     can_tx_header.RTR = CAN_RTR_DATA;
 236:Src/main.c    ****     can_tx_header.StdId = 0x33;
 237:Src/main.c    ****     uint32_t txmail;
 238:Src/main.c    ****     uint8_t can_tx_buf[8]={1,2,3,4,5,6,7,8};
 343              		.loc 1 238 0
 344 002a 0822     		movs	r2, #8
 234:Src/main.c    ****     can_tx_header.IDE = CAN_ID_STD;
 345              		.loc 1 234 0
 346 002c 0993     		str	r3, [sp, #36]
 235:Src/main.c    ****     can_tx_header.RTR = CAN_RTR_DATA;
 347              		.loc 1 235 0
ARM GAS  /tmp/ccUBSKdi.s 			page 12


 348 002e 0A93     		str	r3, [sp, #40]
 349              		.loc 1 238 0
 350 0030 1849     		ldr	r1, .L9+8
 236:Src/main.c    ****     uint32_t txmail;
 351              		.loc 1 236 0
 352 0032 3333     		adds	r3, r3, #51
 353              		.loc 1 238 0
 354 0034 03A8     		add	r0, sp, #12
 236:Src/main.c    ****     uint32_t txmail;
 355              		.loc 1 236 0
 356 0036 0793     		str	r3, [sp, #28]
 357              		.loc 1 238 0
 358 0038 FFF7FEFF 		bl	memcpy
 359              	.LVL16:
 239:Src/main.c    ****     uint8_t can_rx_buf[8]={0};
 360              		.loc 1 239 0
 361 003c 0822     		movs	r2, #8
 362 003e 0021     		movs	r1, #0
 363 0040 05A8     		add	r0, sp, #20
 364 0042 FFF7FEFF 		bl	memset
 365              	.LVL17:
 240:Src/main.c    ****     
 241:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan,&can_tx_header,can_tx_buf,&txmail); //send test
 366              		.loc 1 241 0
 367 0046 144C     		ldr	r4, .L9+12
 368 0048 02AB     		add	r3, sp, #8
 369 004a 03AA     		add	r2, sp, #12
 370 004c 07A9     		add	r1, sp, #28
 371 004e 2000     		movs	r0, r4
 372 0050 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 373              	.LVL18:
 242:Src/main.c    **** 
 243:Src/main.c    ****     if (HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&can_rx_header,can_rx_buf) == HAL_OK)
 374              		.loc 1 243 0
 375 0054 05AB     		add	r3, sp, #20
 376 0056 0DAA     		add	r2, sp, #52
 377 0058 0021     		movs	r1, #0
 378 005a 2000     		movs	r0, r4
 379 005c FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 380              	.LVL19:
 381 0060 0028     		cmp	r0, #0
 382 0062 10D1     		bne	.L7
 244:Src/main.c    ****     { //recv test
 245:Src/main.c    ****       can_tx_header.DLC = can_rx_header.DLC;
 383              		.loc 1 245 0
 384 0064 119B     		ldr	r3, [sp, #68]
 246:Src/main.c    ****       can_tx_header.ExtId = can_rx_header.ExtId;
 247:Src/main.c    ****       can_tx_header.IDE  = can_rx_header.IDE;
 248:Src/main.c    ****       can_tx_header.RTR = can_rx_header.RTR;
 249:Src/main.c    ****       can_tx_header.StdId = can_rx_header.StdId;
 250:Src/main.c    ****       HAL_CAN_AddTxMessage(&hcan,&can_tx_header,can_rx_buf,&txmail);
 385              		.loc 1 250 0
 386 0066 05AA     		add	r2, sp, #20
 245:Src/main.c    ****       can_tx_header.ExtId = can_rx_header.ExtId;
 387              		.loc 1 245 0
 388 0068 0B93     		str	r3, [sp, #44]
 246:Src/main.c    ****       can_tx_header.ExtId = can_rx_header.ExtId;
ARM GAS  /tmp/ccUBSKdi.s 			page 13


 389              		.loc 1 246 0
 390 006a 0E9B     		ldr	r3, [sp, #56]
 391              		.loc 1 250 0
 392 006c 07A9     		add	r1, sp, #28
 246:Src/main.c    ****       can_tx_header.ExtId = can_rx_header.ExtId;
 393              		.loc 1 246 0
 394 006e 0893     		str	r3, [sp, #32]
 247:Src/main.c    ****       can_tx_header.RTR = can_rx_header.RTR;
 395              		.loc 1 247 0
 396 0070 0F9B     		ldr	r3, [sp, #60]
 397              		.loc 1 250 0
 398 0072 2000     		movs	r0, r4
 247:Src/main.c    ****       can_tx_header.RTR = can_rx_header.RTR;
 399              		.loc 1 247 0
 400 0074 0993     		str	r3, [sp, #36]
 248:Src/main.c    ****       can_tx_header.StdId = can_rx_header.StdId;
 401              		.loc 1 248 0
 402 0076 109B     		ldr	r3, [sp, #64]
 403 0078 0193     		str	r3, [sp, #4]
 404 007a 0A93     		str	r3, [sp, #40]
 249:Src/main.c    ****       HAL_CAN_AddTxMessage(&hcan,&can_tx_header,can_rx_buf,&txmail);
 405              		.loc 1 249 0
 406 007c 0D9B     		ldr	r3, [sp, #52]
 407 007e 0793     		str	r3, [sp, #28]
 408              		.loc 1 250 0
 409 0080 02AB     		add	r3, sp, #8
 410 0082 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 411              	.LVL20:
 412              	.L7:
 251:Src/main.c    ****     }  
 252:Src/main.c    **** }
 413              		.loc 1 252 0
 414 0086 14B0     		add	sp, sp, #80
 415              		@ sp needed
 416 0088 10BD     		pop	{r4, pc}
 417              	.L10:
 418 008a C046     		.align	2
 419              	.L9:
 420 008c 00000000 		.word	.LC2
 421 0090 10000000 		.word	.LC4
 422 0094 00000000 		.word	.LANCHOR0
 423 0098 00000000 		.word	hcan
 424              		.cfi_endproc
 425              	.LFE45:
 427              		.section	.text.Error_Handler,"ax",%progbits
 428              		.align	2
 429              		.global	Error_Handler
 430              		.code	16
 431              		.thumb_func
 433              	Error_Handler:
 434              	.LFB46:
 253:Src/main.c    **** 
 254:Src/main.c    **** /* USER CODE END 4 */
 255:Src/main.c    **** 
 256:Src/main.c    **** /**
 257:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 258:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccUBSKdi.s 			page 14


 259:Src/main.c    ****   */
 260:Src/main.c    **** void Error_Handler(void)
 261:Src/main.c    **** {
 435              		.loc 1 261 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 262:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 263:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 264:Src/main.c    **** 
 265:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 266:Src/main.c    **** }
 440              		.loc 1 266 0
 441              		@ sp needed
 442 0000 7047     		bx	lr
 443              		.cfi_endproc
 444              	.LFE46:
 446              		.comm	hcan,40,4
 447 0002 C046     		.section	.rodata
 448              		.align	2
 449              		.set	.LANCHOR0,. + 0
 450              	.LC0:
 451 0000 01       		.byte	1
 452 0001 02       		.byte	2
 453 0002 03       		.byte	3
 454 0003 04       		.byte	4
 455 0004 05       		.byte	5
 456 0005 06       		.byte	6
 457 0006 07       		.byte	7
 458 0007 08       		.byte	8
 459              		.section	.rodata.str1.4,"aMS",%progbits,1
 460              		.align	2
 461              	.LC2:
 462 0000 74313233 		.ascii	"t1234DEADBEEF\015\000"
 462      34444541 
 462      44424545 
 462      460D00
 463 000f 00       		.space	1
 464              	.LC4:
 465 0010 74313233 		.ascii	"t1234DEADBEE8\015\000"
 465      34444541 
 465      44424545 
 465      380D00
 466              		.text
 467              	.Letext0:
 468              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 469              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 470              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 471              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 472              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 473              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 474              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 475              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_can.h"
 476              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 477              		.file 11 "Inc/usb_device.h"
 478              		.file 12 "Inc/usbd_cdc_if.h"
ARM GAS  /tmp/ccUBSKdi.s 			page 15


ARM GAS  /tmp/ccUBSKdi.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccUBSKdi.s:20     .text.SystemClock_Config:00000000 $t
     /tmp/ccUBSKdi.s:25     .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccUBSKdi.s:120    .text.startup.main:00000000 $t
     /tmp/ccUBSKdi.s:125    .text.startup.main:00000000 main
     /tmp/ccUBSKdi.s:286    .text.startup.main:00000098 $d
                            *COM*:00000028 hcan
     /tmp/ccUBSKdi.s:295    .text.function_test:00000000 $t
     /tmp/ccUBSKdi.s:300    .text.function_test:00000000 function_test
     /tmp/ccUBSKdi.s:420    .text.function_test:0000008c $d
     /tmp/ccUBSKdi.s:428    .text.Error_Handler:00000000 $t
     /tmp/ccUBSKdi.s:433    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccUBSKdi.s:448    .rodata:00000000 $d
     /tmp/ccUBSKdi.s:460    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_ActivateNotification
HAL_Delay
CDC_Transmit_FS
memcpy
HAL_CAN_AddTxMessage
HAL_CAN_GetRxMessage
