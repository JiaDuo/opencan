ARM GAS  /tmp/ccNr7baD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"usbd_cdc_if.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CDC_DeInit_FS,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  24              	CDC_DeInit_FS:
  25              	.LFB42:
  26              		.file 1 "Src/usbd_cdc_if.c"
   1:Src/usbd_cdc_if.c **** /* USER CODE BEGIN Header */
   2:Src/usbd_cdc_if.c **** /**
   3:Src/usbd_cdc_if.c ****   ******************************************************************************
   4:Src/usbd_cdc_if.c ****   * @file           : usbd_cdc_if.c
   5:Src/usbd_cdc_if.c ****   * @version        : v2.0_Cube
   6:Src/usbd_cdc_if.c ****   * @brief          : Usb device for Virtual Com Port.
   7:Src/usbd_cdc_if.c ****   ******************************************************************************
   8:Src/usbd_cdc_if.c ****   * @attention
   9:Src/usbd_cdc_if.c ****   *
  10:Src/usbd_cdc_if.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  11:Src/usbd_cdc_if.c ****   * All rights reserved.</center></h2>
  12:Src/usbd_cdc_if.c ****   *
  13:Src/usbd_cdc_if.c ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/usbd_cdc_if.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/usbd_cdc_if.c ****   * the License. You may obtain a copy of the License at:
  16:Src/usbd_cdc_if.c ****   *                             www.st.com/SLA0044
  17:Src/usbd_cdc_if.c ****   *
  18:Src/usbd_cdc_if.c ****   ******************************************************************************
  19:Src/usbd_cdc_if.c ****   */
  20:Src/usbd_cdc_if.c **** /* USER CODE END Header */
  21:Src/usbd_cdc_if.c **** 
  22:Src/usbd_cdc_if.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/usbd_cdc_if.c **** #include "usbd_cdc_if.h"
  24:Src/usbd_cdc_if.c **** 
  25:Src/usbd_cdc_if.c **** /* USER CODE BEGIN INCLUDE */
  26:Src/usbd_cdc_if.c **** #include "slcan.h"
  27:Src/usbd_cdc_if.c **** #include "stdlib.h"
  28:Src/usbd_cdc_if.c **** /* USER CODE END INCLUDE */
  29:Src/usbd_cdc_if.c **** 
  30:Src/usbd_cdc_if.c **** /* Private typedef -----------------------------------------------------------*/
  31:Src/usbd_cdc_if.c **** /* Private define ------------------------------------------------------------*/
  32:Src/usbd_cdc_if.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/ccNr7baD.s 			page 2


  33:Src/usbd_cdc_if.c **** 
  34:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PV */
  35:Src/usbd_cdc_if.c **** /* Private variables ---------------------------------------------------------*/
  36:Src/usbd_cdc_if.c **** 
  37:Src/usbd_cdc_if.c **** /* USER CODE END PV */
  38:Src/usbd_cdc_if.c **** 
  39:Src/usbd_cdc_if.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  40:Src/usbd_cdc_if.c ****   * @brief Usb device library.
  41:Src/usbd_cdc_if.c ****   * @{
  42:Src/usbd_cdc_if.c ****   */
  43:Src/usbd_cdc_if.c **** 
  44:Src/usbd_cdc_if.c **** /** @addtogroup USBD_CDC_IF
  45:Src/usbd_cdc_if.c ****   * @{
  46:Src/usbd_cdc_if.c ****   */
  47:Src/usbd_cdc_if.c **** 
  48:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_TypesDefinitions USBD_CDC_IF_Private_TypesDefinitions
  49:Src/usbd_cdc_if.c ****   * @brief Private types.
  50:Src/usbd_cdc_if.c ****   * @{
  51:Src/usbd_cdc_if.c ****   */
  52:Src/usbd_cdc_if.c **** 
  53:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  54:Src/usbd_cdc_if.c **** 
  55:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_TYPES */
  56:Src/usbd_cdc_if.c **** 
  57:Src/usbd_cdc_if.c **** /**
  58:Src/usbd_cdc_if.c ****   * @}
  59:Src/usbd_cdc_if.c ****   */
  60:Src/usbd_cdc_if.c **** 
  61:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_Defines USBD_CDC_IF_Private_Defines
  62:Src/usbd_cdc_if.c ****   * @brief Private defines.
  63:Src/usbd_cdc_if.c ****   * @{
  64:Src/usbd_cdc_if.c ****   */
  65:Src/usbd_cdc_if.c **** 
  66:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  67:Src/usbd_cdc_if.c **** /* Define size for the receive and transmit buffer over CDC */
  68:Src/usbd_cdc_if.c **** /* It's up to user to redefine and/or remove those define */
  69:Src/usbd_cdc_if.c **** #define APP_RX_DATA_SIZE  500
  70:Src/usbd_cdc_if.c **** #define APP_TX_DATA_SIZE  500
  71:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_DEFINES */
  72:Src/usbd_cdc_if.c **** 
  73:Src/usbd_cdc_if.c **** /**
  74:Src/usbd_cdc_if.c ****   * @}
  75:Src/usbd_cdc_if.c ****   */
  76:Src/usbd_cdc_if.c **** 
  77:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_Macros USBD_CDC_IF_Private_Macros
  78:Src/usbd_cdc_if.c ****   * @brief Private macros.
  79:Src/usbd_cdc_if.c ****   * @{
  80:Src/usbd_cdc_if.c ****   */
  81:Src/usbd_cdc_if.c **** 
  82:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  83:Src/usbd_cdc_if.c **** 
  84:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_MACRO */
  85:Src/usbd_cdc_if.c **** 
  86:Src/usbd_cdc_if.c **** /**
  87:Src/usbd_cdc_if.c ****   * @}
  88:Src/usbd_cdc_if.c ****   */
  89:Src/usbd_cdc_if.c **** 
ARM GAS  /tmp/ccNr7baD.s 			page 3


  90:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_Variables USBD_CDC_IF_Private_Variables
  91:Src/usbd_cdc_if.c ****   * @brief Private variables.
  92:Src/usbd_cdc_if.c ****   * @{
  93:Src/usbd_cdc_if.c ****   */
  94:Src/usbd_cdc_if.c **** /* Create buffer for reception and transmission           */
  95:Src/usbd_cdc_if.c **** /* It's up to user to redefine and/or remove those define */
  96:Src/usbd_cdc_if.c **** /** Received data over USB are stored in this buffer      */
  97:Src/usbd_cdc_if.c **** uint8_t UserRxBufferFS[APP_RX_DATA_SIZE];
  98:Src/usbd_cdc_if.c **** 
  99:Src/usbd_cdc_if.c **** /** Data to send over USB CDC are stored in this buffer   */
 100:Src/usbd_cdc_if.c **** uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
 101:Src/usbd_cdc_if.c **** 
 102:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_VARIABLES */
 103:Src/usbd_cdc_if.c **** 
 104:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_VARIABLES */
 105:Src/usbd_cdc_if.c **** 
 106:Src/usbd_cdc_if.c **** /**
 107:Src/usbd_cdc_if.c ****   * @}
 108:Src/usbd_cdc_if.c ****   */
 109:Src/usbd_cdc_if.c **** 
 110:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Exported_Variables USBD_CDC_IF_Exported_Variables
 111:Src/usbd_cdc_if.c ****   * @brief Public variables.
 112:Src/usbd_cdc_if.c ****   * @{
 113:Src/usbd_cdc_if.c ****   */
 114:Src/usbd_cdc_if.c **** 
 115:Src/usbd_cdc_if.c **** extern USBD_HandleTypeDef hUsbDeviceFS;
 116:Src/usbd_cdc_if.c **** 
 117:Src/usbd_cdc_if.c **** /* USER CODE BEGIN EXPORTED_VARIABLES */
 118:Src/usbd_cdc_if.c **** 
 119:Src/usbd_cdc_if.c **** /* USER CODE END EXPORTED_VARIABLES */
 120:Src/usbd_cdc_if.c **** 
 121:Src/usbd_cdc_if.c **** /**
 122:Src/usbd_cdc_if.c ****   * @}
 123:Src/usbd_cdc_if.c ****   */
 124:Src/usbd_cdc_if.c **** 
 125:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_FunctionPrototypes USBD_CDC_IF_Private_FunctionPrototypes
 126:Src/usbd_cdc_if.c ****   * @brief Private functions declaration.
 127:Src/usbd_cdc_if.c ****   * @{
 128:Src/usbd_cdc_if.c ****   */
 129:Src/usbd_cdc_if.c **** 
 130:Src/usbd_cdc_if.c **** static int8_t CDC_Init_FS(void);
 131:Src/usbd_cdc_if.c **** static int8_t CDC_DeInit_FS(void);
 132:Src/usbd_cdc_if.c **** static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
 133:Src/usbd_cdc_if.c **** static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
 134:Src/usbd_cdc_if.c **** 
 135:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
 136:Src/usbd_cdc_if.c **** 
 137:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 138:Src/usbd_cdc_if.c **** 
 139:Src/usbd_cdc_if.c **** /**
 140:Src/usbd_cdc_if.c ****   * @}
 141:Src/usbd_cdc_if.c ****   */
 142:Src/usbd_cdc_if.c **** 
 143:Src/usbd_cdc_if.c **** USBD_CDC_ItfTypeDef USBD_Interface_fops_FS =
 144:Src/usbd_cdc_if.c **** {
 145:Src/usbd_cdc_if.c ****   CDC_Init_FS,
 146:Src/usbd_cdc_if.c ****   CDC_DeInit_FS,
ARM GAS  /tmp/ccNr7baD.s 			page 4


 147:Src/usbd_cdc_if.c ****   CDC_Control_FS,
 148:Src/usbd_cdc_if.c ****   CDC_Receive_FS
 149:Src/usbd_cdc_if.c **** };
 150:Src/usbd_cdc_if.c **** 
 151:Src/usbd_cdc_if.c **** /* Private functions ---------------------------------------------------------*/
 152:Src/usbd_cdc_if.c **** /**
 153:Src/usbd_cdc_if.c ****   * @brief  Initializes the CDC media low layer over the FS USB IP
 154:Src/usbd_cdc_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 155:Src/usbd_cdc_if.c ****   */
 156:Src/usbd_cdc_if.c **** static int8_t CDC_Init_FS(void)
 157:Src/usbd_cdc_if.c **** {
 158:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 3 */
 159:Src/usbd_cdc_if.c ****   /* Set Application Buffers */
 160:Src/usbd_cdc_if.c ****   USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 161:Src/usbd_cdc_if.c ****   USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 162:Src/usbd_cdc_if.c ****   return (USBD_OK);
 163:Src/usbd_cdc_if.c ****   /* USER CODE END 3 */
 164:Src/usbd_cdc_if.c **** }
 165:Src/usbd_cdc_if.c **** 
 166:Src/usbd_cdc_if.c **** /**
 167:Src/usbd_cdc_if.c ****   * @brief  DeInitializes the CDC media low layer
 168:Src/usbd_cdc_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 169:Src/usbd_cdc_if.c ****   */
 170:Src/usbd_cdc_if.c **** static int8_t CDC_DeInit_FS(void)
 171:Src/usbd_cdc_if.c **** {
  27              		.loc 1 171 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 172:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 4 */
 173:Src/usbd_cdc_if.c ****   return (USBD_OK);
 174:Src/usbd_cdc_if.c ****   /* USER CODE END 4 */
 175:Src/usbd_cdc_if.c **** }
  32              		.loc 1 175 0
  33 0000 0020     		movs	r0, #0
  34              		@ sp needed
  35 0002 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE42:
  39              		.section	.text.CDC_Control_FS,"ax",%progbits
  40              		.align	2
  41              		.code	16
  42              		.thumb_func
  44              	CDC_Control_FS:
  45              	.LFB43:
 176:Src/usbd_cdc_if.c **** 
 177:Src/usbd_cdc_if.c **** /**
 178:Src/usbd_cdc_if.c ****   * @brief  Manage the CDC class requests
 179:Src/usbd_cdc_if.c ****   * @param  cmd: Command code
 180:Src/usbd_cdc_if.c ****   * @param  pbuf: Buffer containing command data (request parameters)
 181:Src/usbd_cdc_if.c ****   * @param  length: Number of data to be sent (in bytes)
 182:Src/usbd_cdc_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 183:Src/usbd_cdc_if.c ****   */
 184:Src/usbd_cdc_if.c **** static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
 185:Src/usbd_cdc_if.c **** {
  46              		.loc 1 185 0
ARM GAS  /tmp/ccNr7baD.s 			page 5


  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.LVL0:
 186:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 5 */
 187:Src/usbd_cdc_if.c ****   switch(cmd)
 188:Src/usbd_cdc_if.c ****   {
 189:Src/usbd_cdc_if.c ****     case CDC_SEND_ENCAPSULATED_COMMAND:
 190:Src/usbd_cdc_if.c **** 
 191:Src/usbd_cdc_if.c ****     break;
 192:Src/usbd_cdc_if.c **** 
 193:Src/usbd_cdc_if.c ****     case CDC_GET_ENCAPSULATED_RESPONSE:
 194:Src/usbd_cdc_if.c **** 
 195:Src/usbd_cdc_if.c ****     break;
 196:Src/usbd_cdc_if.c **** 
 197:Src/usbd_cdc_if.c ****     case CDC_SET_COMM_FEATURE:
 198:Src/usbd_cdc_if.c **** 
 199:Src/usbd_cdc_if.c ****     break;
 200:Src/usbd_cdc_if.c **** 
 201:Src/usbd_cdc_if.c ****     case CDC_GET_COMM_FEATURE:
 202:Src/usbd_cdc_if.c **** 
 203:Src/usbd_cdc_if.c ****     break;
 204:Src/usbd_cdc_if.c **** 
 205:Src/usbd_cdc_if.c ****     case CDC_CLEAR_COMM_FEATURE:
 206:Src/usbd_cdc_if.c **** 
 207:Src/usbd_cdc_if.c ****     break;
 208:Src/usbd_cdc_if.c **** 
 209:Src/usbd_cdc_if.c ****   /*******************************************************************************/
 210:Src/usbd_cdc_if.c ****   /* Line Coding Structure                                                       */
 211:Src/usbd_cdc_if.c ****   /*-----------------------------------------------------------------------------*/
 212:Src/usbd_cdc_if.c ****   /* Offset | Field       | Size | Value  | Description                          */
 213:Src/usbd_cdc_if.c ****   /* 0      | dwDTERate   |   4  | Number |Data terminal rate, in bits per second*/
 214:Src/usbd_cdc_if.c ****   /* 4      | bCharFormat |   1  | Number | Stop bits                            */
 215:Src/usbd_cdc_if.c ****   /*                                        0 - 1 Stop bit                       */
 216:Src/usbd_cdc_if.c ****   /*                                        1 - 1.5 Stop bits                    */
 217:Src/usbd_cdc_if.c ****   /*                                        2 - 2 Stop bits                      */
 218:Src/usbd_cdc_if.c ****   /* 5      | bParityType |  1   | Number | Parity                               */
 219:Src/usbd_cdc_if.c ****   /*                                        0 - None                             */
 220:Src/usbd_cdc_if.c ****   /*                                        1 - Odd                              */
 221:Src/usbd_cdc_if.c ****   /*                                        2 - Even                             */
 222:Src/usbd_cdc_if.c ****   /*                                        3 - Mark                             */
 223:Src/usbd_cdc_if.c ****   /*                                        4 - Space                            */
 224:Src/usbd_cdc_if.c ****   /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
 225:Src/usbd_cdc_if.c ****   /*******************************************************************************/
 226:Src/usbd_cdc_if.c ****     case CDC_SET_LINE_CODING:
 227:Src/usbd_cdc_if.c **** 
 228:Src/usbd_cdc_if.c ****     break;
 229:Src/usbd_cdc_if.c **** 
 230:Src/usbd_cdc_if.c ****     case CDC_GET_LINE_CODING:
 231:Src/usbd_cdc_if.c **** 
 232:Src/usbd_cdc_if.c ****     break;
 233:Src/usbd_cdc_if.c **** 
 234:Src/usbd_cdc_if.c ****     case CDC_SET_CONTROL_LINE_STATE:
 235:Src/usbd_cdc_if.c **** 
 236:Src/usbd_cdc_if.c ****     break;
 237:Src/usbd_cdc_if.c **** 
ARM GAS  /tmp/ccNr7baD.s 			page 6


 238:Src/usbd_cdc_if.c ****     case CDC_SEND_BREAK:
 239:Src/usbd_cdc_if.c **** 
 240:Src/usbd_cdc_if.c ****     break;
 241:Src/usbd_cdc_if.c **** 
 242:Src/usbd_cdc_if.c ****   default:
 243:Src/usbd_cdc_if.c ****     break;
 244:Src/usbd_cdc_if.c ****   }
 245:Src/usbd_cdc_if.c **** 
 246:Src/usbd_cdc_if.c ****   return (USBD_OK);
 247:Src/usbd_cdc_if.c ****   /* USER CODE END 5 */
 248:Src/usbd_cdc_if.c **** }
  52              		.loc 1 248 0
  53 0000 0020     		movs	r0, #0
  54              	.LVL1:
  55              		@ sp needed
  56 0002 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE43:
  60              		.section	.text.CDC_Receive_FS,"ax",%progbits
  61              		.align	2
  62              		.code	16
  63              		.thumb_func
  65              	CDC_Receive_FS:
  66              	.LFB44:
 249:Src/usbd_cdc_if.c **** 
 250:Src/usbd_cdc_if.c **** /**
 251:Src/usbd_cdc_if.c ****   * @brief  Data received over USB OUT endpoint are sent over CDC interface
 252:Src/usbd_cdc_if.c ****   *         through this function.
 253:Src/usbd_cdc_if.c ****   *
 254:Src/usbd_cdc_if.c ****   *         @note
 255:Src/usbd_cdc_if.c ****   *         This function will block any OUT packet reception on USB endpoint
 256:Src/usbd_cdc_if.c ****   *         untill exiting this function. If you exit this function before transfer
 257:Src/usbd_cdc_if.c ****   *         is complete on CDC interface (ie. using DMA controller) it will result
 258:Src/usbd_cdc_if.c ****   *         in receiving more data while previous ones are still not sent.
 259:Src/usbd_cdc_if.c ****   *
 260:Src/usbd_cdc_if.c ****   * @param  Buf: Buffer of data to be received
 261:Src/usbd_cdc_if.c ****   * @param  Len: Number of data received (in bytes)
 262:Src/usbd_cdc_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 263:Src/usbd_cdc_if.c ****   */
 264:Src/usbd_cdc_if.c **** static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
 265:Src/usbd_cdc_if.c **** {
  67              		.loc 1 265 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL2:
  72 0000 70B5     		push	{r4, r5, r6, lr}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 16
  75              		.cfi_offset 4, -16
  76              		.cfi_offset 5, -12
  77              		.cfi_offset 6, -8
  78              		.cfi_offset 14, -4
  79              		.loc 1 265 0
  80 0002 0500     		movs	r5, r0
 266:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 6 */
 267:Src/usbd_cdc_if.c ****   //cdc_task_test(Buf,*Len);
ARM GAS  /tmp/ccNr7baD.s 			page 7


 268:Src/usbd_cdc_if.c ****   slcan_cdc_process((char*)Buf,*Len);
  81              		.loc 1 268 0
  82 0004 0968     		ldr	r1, [r1]
  83              	.LVL3:
  84 0006 FFF7FEFF 		bl	slcan_cdc_process
  85              	.LVL4:
 269:Src/usbd_cdc_if.c **** 
 270:Src/usbd_cdc_if.c ****   USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  86              		.loc 1 270 0
  87 000a 054C     		ldr	r4, .L4
  88 000c 2900     		movs	r1, r5
  89 000e 2000     		movs	r0, r4
  90 0010 FFF7FEFF 		bl	USBD_CDC_SetRxBuffer
  91              	.LVL5:
 271:Src/usbd_cdc_if.c ****   USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  92              		.loc 1 271 0
  93 0014 2000     		movs	r0, r4
  94 0016 FFF7FEFF 		bl	USBD_CDC_ReceivePacket
  95              	.LVL6:
 272:Src/usbd_cdc_if.c ****   return (USBD_OK);
 273:Src/usbd_cdc_if.c ****   /* USER CODE END 6 */
 274:Src/usbd_cdc_if.c **** }
  96              		.loc 1 274 0
  97              		@ sp needed
  98 001a 0020     		movs	r0, #0
  99              	.LVL7:
 100 001c 70BD     		pop	{r4, r5, r6, pc}
 101              	.L5:
 102 001e C046     		.align	2
 103              	.L4:
 104 0020 00000000 		.word	hUsbDeviceFS
 105              		.cfi_endproc
 106              	.LFE44:
 108              		.section	.text.CDC_Init_FS,"ax",%progbits
 109              		.align	2
 110              		.code	16
 111              		.thumb_func
 113              	CDC_Init_FS:
 114              	.LFB41:
 157:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 3 */
 115              		.loc 1 157 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119 0000 10B5     		push	{r4, lr}
 120              	.LCFI1:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 4, -8
 123              		.cfi_offset 14, -4
 160:Src/usbd_cdc_if.c ****   USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 124              		.loc 1 160 0
 125 0002 064C     		ldr	r4, .L7
 126 0004 0022     		movs	r2, #0
 127 0006 0649     		ldr	r1, .L7+4
 128 0008 2000     		movs	r0, r4
 129 000a FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 130              	.LVL8:
ARM GAS  /tmp/ccNr7baD.s 			page 8


 161:Src/usbd_cdc_if.c ****   return (USBD_OK);
 131              		.loc 1 161 0
 132 000e 0549     		ldr	r1, .L7+8
 133 0010 2000     		movs	r0, r4
 134 0012 FFF7FEFF 		bl	USBD_CDC_SetRxBuffer
 135              	.LVL9:
 164:Src/usbd_cdc_if.c **** 
 136              		.loc 1 164 0
 137              		@ sp needed
 138 0016 0020     		movs	r0, #0
 139 0018 10BD     		pop	{r4, pc}
 140              	.L8:
 141 001a C046     		.align	2
 142              	.L7:
 143 001c 00000000 		.word	hUsbDeviceFS
 144 0020 00000000 		.word	UserTxBufferFS
 145 0024 00000000 		.word	UserRxBufferFS
 146              		.cfi_endproc
 147              	.LFE41:
 149              		.section	.text.CDC_Transmit_FS,"ax",%progbits
 150              		.align	2
 151              		.global	CDC_Transmit_FS
 152              		.code	16
 153              		.thumb_func
 155              	CDC_Transmit_FS:
 156              	.LFB45:
 275:Src/usbd_cdc_if.c **** 
 276:Src/usbd_cdc_if.c **** /**
 277:Src/usbd_cdc_if.c ****   * @brief  CDC_Transmit_FS
 278:Src/usbd_cdc_if.c ****   *         Data to send over USB IN endpoint are sent over CDC interface
 279:Src/usbd_cdc_if.c ****   *         through this function.
 280:Src/usbd_cdc_if.c ****   *         @note
 281:Src/usbd_cdc_if.c ****   *
 282:Src/usbd_cdc_if.c ****   *
 283:Src/usbd_cdc_if.c ****   * @param  Buf: Buffer of data to be sent
 284:Src/usbd_cdc_if.c ****   * @param  Len: Number of data to be sent (in bytes)
 285:Src/usbd_cdc_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 286:Src/usbd_cdc_if.c ****   */
 287:Src/usbd_cdc_if.c **** uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
 288:Src/usbd_cdc_if.c **** {
 157              		.loc 1 288 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              	.LVL10:
 289:Src/usbd_cdc_if.c ****   uint8_t result = USBD_OK;
 290:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 7 */
 291:Src/usbd_cdc_if.c ****   USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 162              		.loc 1 291 0
 163 0000 AE23     		movs	r3, #174
 288:Src/usbd_cdc_if.c ****   uint8_t result = USBD_OK;
 164              		.loc 1 288 0
 165 0002 70B5     		push	{r4, r5, r6, lr}
 166              	.LCFI2:
 167              		.cfi_def_cfa_offset 16
 168              		.cfi_offset 4, -16
 169              		.cfi_offset 5, -12
ARM GAS  /tmp/ccNr7baD.s 			page 9


 170              		.cfi_offset 6, -8
 171              		.cfi_offset 14, -4
 172              		.loc 1 291 0
 173 0004 084C     		ldr	r4, .L13
 174 0006 9B00     		lsls	r3, r3, #2
 175 0008 E558     		ldr	r5, [r4, r3]
 176              	.LVL11:
 292:Src/usbd_cdc_if.c ****   if (hcdc->TxState != 0){
 177              		.loc 1 292 0
 178 000a A43B     		subs	r3, r3, #164
 179 000c EB58     		ldr	r3, [r5, r3]
 288:Src/usbd_cdc_if.c ****   uint8_t result = USBD_OK;
 180              		.loc 1 288 0
 181 000e 0600     		movs	r6, r0
 293:Src/usbd_cdc_if.c ****     return USBD_BUSY;
 182              		.loc 1 293 0
 183 0010 0120     		movs	r0, #1
 184              	.LVL12:
 292:Src/usbd_cdc_if.c ****   if (hcdc->TxState != 0){
 185              		.loc 1 292 0
 186 0012 002B     		cmp	r3, #0
 187 0014 07D1     		bne	.L10
 188              	.LVL13:
 189              	.LBB6:
 190              	.LBB7:
 294:Src/usbd_cdc_if.c ****   }
 295:Src/usbd_cdc_if.c ****   USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 191              		.loc 1 295 0
 192 0016 0A00     		movs	r2, r1
 193 0018 2000     		movs	r0, r4
 194 001a 3100     		movs	r1, r6
 195              	.LVL14:
 196 001c FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 197              	.LVL15:
 296:Src/usbd_cdc_if.c ****   result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 198              		.loc 1 296 0
 199 0020 2000     		movs	r0, r4
 200 0022 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 201              	.LVL16:
 202              	.L10:
 203              	.LBE7:
 204              	.LBE6:
 297:Src/usbd_cdc_if.c ****   /* USER CODE END 7 */
 298:Src/usbd_cdc_if.c ****   return result;
 299:Src/usbd_cdc_if.c **** }
 205              		.loc 1 299 0
 206              		@ sp needed
 207              	.LVL17:
 208              	.LVL18:
 209 0026 70BD     		pop	{r4, r5, r6, pc}
 210              	.L14:
 211              		.align	2
 212              	.L13:
 213 0028 00000000 		.word	hUsbDeviceFS
 214              		.cfi_endproc
 215              	.LFE45:
 217              		.section	.text.cdc_task_test,"ax",%progbits
ARM GAS  /tmp/ccNr7baD.s 			page 10


 218              		.align	2
 219              		.global	cdc_task_test
 220              		.code	16
 221              		.thumb_func
 223              	cdc_task_test:
 224              	.LFB46:
 300:Src/usbd_cdc_if.c **** 
 301:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
 302:Src/usbd_cdc_if.c **** void cdc_task_test(uint8_t* buf,uint32_t len){
 225              		.loc 1 302 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              	.LVL19:
 230 0000 70B5     		push	{r4, r5, r6, lr}
 231              	.LCFI3:
 232              		.cfi_def_cfa_offset 16
 233              		.cfi_offset 4, -16
 234              		.cfi_offset 5, -12
 235              		.cfi_offset 6, -8
 236              		.cfi_offset 14, -4
 237              		.loc 1 302 0
 238 0002 0C1E     		subs	r4, r1, #0
 303:Src/usbd_cdc_if.c ****     if (len){
 239              		.loc 1 303 0
 240 0004 00D1     		bne	.L19
 241              	.LVL20:
 242              	.L15:
 304:Src/usbd_cdc_if.c ****       strncpy((char*)UserTxBufferFS,(const char*)buf,len);
 305:Src/usbd_cdc_if.c ****       CDC_Transmit_FS(UserTxBufferFS,len);
 306:Src/usbd_cdc_if.c ****     }
 307:Src/usbd_cdc_if.c **** }
 243              		.loc 1 307 0
 244              		@ sp needed
 245              	.LVL21:
 246 0006 70BD     		pop	{r4, r5, r6, pc}
 247              	.LVL22:
 248              	.L19:
 304:Src/usbd_cdc_if.c ****       strncpy((char*)UserTxBufferFS,(const char*)buf,len);
 249              		.loc 1 304 0
 250 0008 0B4E     		ldr	r6, .L20
 251 000a 0A00     		movs	r2, r1
 252 000c 0100     		movs	r1, r0
 253              	.LVL23:
 254 000e 3000     		movs	r0, r6
 255              	.LVL24:
 256 0010 FFF7FEFF 		bl	strncpy
 257              	.LVL25:
 258              	.LBB12:
 259              	.LBB13:
 291:Src/usbd_cdc_if.c ****   if (hcdc->TxState != 0){
 260              		.loc 1 291 0
 261 0014 AE23     		movs	r3, #174
 262 0016 094D     		ldr	r5, .L20+4
 263 0018 9B00     		lsls	r3, r3, #2
 264 001a EA58     		ldr	r2, [r5, r3]
 265              	.LVL26:
ARM GAS  /tmp/ccNr7baD.s 			page 11


 292:Src/usbd_cdc_if.c ****     return USBD_BUSY;
 266              		.loc 1 292 0
 267 001c A43B     		subs	r3, r3, #164
 268 001e D358     		ldr	r3, [r2, r3]
 269 0020 002B     		cmp	r3, #0
 270 0022 F0D1     		bne	.L15
 271              	.LVL27:
 272              	.LBB14:
 273              	.LBB15:
 295:Src/usbd_cdc_if.c ****   result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 274              		.loc 1 295 0
 275 0024 A2B2     		uxth	r2, r4
 276              	.LVL28:
 277 0026 3100     		movs	r1, r6
 278 0028 2800     		movs	r0, r5
 279 002a FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 280              	.LVL29:
 296:Src/usbd_cdc_if.c ****   /* USER CODE END 7 */
 281              		.loc 1 296 0
 282 002e 2800     		movs	r0, r5
 283 0030 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 284              	.LVL30:
 285              	.LBE15:
 286              	.LBE14:
 287              	.LBE13:
 288              	.LBE12:
 289              		.loc 1 307 0
 290 0034 E7E7     		b	.L15
 291              	.L21:
 292 0036 C046     		.align	2
 293              	.L20:
 294 0038 00000000 		.word	UserTxBufferFS
 295 003c 00000000 		.word	hUsbDeviceFS
 296              		.cfi_endproc
 297              	.LFE46:
 299              		.global	USBD_Interface_fops_FS
 300              		.comm	UserTxBufferFS,500,4
 301              		.comm	UserRxBufferFS,500,4
 302              		.section	.data.USBD_Interface_fops_FS,"aw",%progbits
 303              		.align	2
 306              	USBD_Interface_fops_FS:
 307 0000 00000000 		.word	CDC_Init_FS
 308 0004 00000000 		.word	CDC_DeInit_FS
 309 0008 00000000 		.word	CDC_Control_FS
 310 000c 00000000 		.word	CDC_Receive_FS
 311              		.text
 312              	.Letext0:
 313              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 314              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 315              		.file 4 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 316              		.file 5 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 317              		.file 6 "Src/slcan_port/slcan.h"
 318              		.file 7 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/string.h"
ARM GAS  /tmp/ccNr7baD.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 usbd_cdc_if.c
     /tmp/ccNr7baD.s:20     .text.CDC_DeInit_FS:00000000 $t
     /tmp/ccNr7baD.s:24     .text.CDC_DeInit_FS:00000000 CDC_DeInit_FS
     /tmp/ccNr7baD.s:40     .text.CDC_Control_FS:00000000 $t
     /tmp/ccNr7baD.s:44     .text.CDC_Control_FS:00000000 CDC_Control_FS
     /tmp/ccNr7baD.s:61     .text.CDC_Receive_FS:00000000 $t
     /tmp/ccNr7baD.s:65     .text.CDC_Receive_FS:00000000 CDC_Receive_FS
     /tmp/ccNr7baD.s:104    .text.CDC_Receive_FS:00000020 $d
     /tmp/ccNr7baD.s:109    .text.CDC_Init_FS:00000000 $t
     /tmp/ccNr7baD.s:113    .text.CDC_Init_FS:00000000 CDC_Init_FS
     /tmp/ccNr7baD.s:143    .text.CDC_Init_FS:0000001c $d
                            *COM*:000001f4 UserTxBufferFS
                            *COM*:000001f4 UserRxBufferFS
     /tmp/ccNr7baD.s:150    .text.CDC_Transmit_FS:00000000 $t
     /tmp/ccNr7baD.s:155    .text.CDC_Transmit_FS:00000000 CDC_Transmit_FS
     /tmp/ccNr7baD.s:213    .text.CDC_Transmit_FS:00000028 $d
     /tmp/ccNr7baD.s:218    .text.cdc_task_test:00000000 $t
     /tmp/ccNr7baD.s:223    .text.cdc_task_test:00000000 cdc_task_test
     /tmp/ccNr7baD.s:294    .text.cdc_task_test:00000038 $d
     /tmp/ccNr7baD.s:306    .data.USBD_Interface_fops_FS:00000000 USBD_Interface_fops_FS
     /tmp/ccNr7baD.s:303    .data.USBD_Interface_fops_FS:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
slcan_cdc_process
USBD_CDC_SetRxBuffer
USBD_CDC_ReceivePacket
hUsbDeviceFS
USBD_CDC_SetTxBuffer
USBD_CDC_TransmitPacket
strncpy
