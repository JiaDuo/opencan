ARM GAS  /tmp/ccbKJdUK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f0xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	2
  21              		.global	NMI_Handler
  22              		.code	16
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB50:
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              		@ sp needed
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE50:
  36 0002 C046     		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	2
  38              		.global	HardFault_Handler
  39              		.code	16
  40              		.thumb_func
  42              	HardFault_Handler:
  43              	.LFB41:
  44              		.file 1 "Src/stm32f0xx_it.c"
   1:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f0xx_it.c **** /**
   3:Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Src/stm32f0xx_it.c ****   * @attention
   8:Src/stm32f0xx_it.c ****   *
   9:Src/stm32f0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f0xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f0xx_it.c ****   *
  12:Src/stm32f0xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f0xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f0xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32f0xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32f0xx_it.c ****   *
ARM GAS  /tmp/ccbKJdUK.s 			page 2


  17:Src/stm32f0xx_it.c ****   ******************************************************************************
  18:Src/stm32f0xx_it.c ****   */
  19:Src/stm32f0xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f0xx_it.c **** 
  21:Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f0xx_it.c **** #include "main.h"
  23:Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  24:Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f0xx_it.c **** 
  28:Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f0xx_it.c **** 
  31:Src/stm32f0xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f0xx_it.c **** 
  33:Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f0xx_it.c ****  
  36:Src/stm32f0xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f0xx_it.c **** 
  38:Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f0xx_it.c **** 
  41:Src/stm32f0xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f0xx_it.c **** 
  43:Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f0xx_it.c **** 
  46:Src/stm32f0xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f0xx_it.c **** 
  48:Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f0xx_it.c **** 
  51:Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f0xx_it.c **** 
  53:Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f0xx_it.c **** 
  56:Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f0xx_it.c **** 
  58:Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f0xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  60:Src/stm32f0xx_it.c **** extern CAN_HandleTypeDef hcan;
  61:Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  62:Src/stm32f0xx_it.c **** 
  63:Src/stm32f0xx_it.c **** /* USER CODE END EV */
  64:Src/stm32f0xx_it.c **** 
  65:Src/stm32f0xx_it.c **** /******************************************************************************/
  66:Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */ 
  67:Src/stm32f0xx_it.c **** /******************************************************************************/
  68:Src/stm32f0xx_it.c **** /**
  69:Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Src/stm32f0xx_it.c ****   */
  71:Src/stm32f0xx_it.c **** void NMI_Handler(void)
  72:Src/stm32f0xx_it.c **** {
  73:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
ARM GAS  /tmp/ccbKJdUK.s 			page 3


  74:Src/stm32f0xx_it.c **** 
  75:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Src/stm32f0xx_it.c **** 
  78:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  79:Src/stm32f0xx_it.c **** }
  80:Src/stm32f0xx_it.c **** 
  81:Src/stm32f0xx_it.c **** /**
  82:Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  83:Src/stm32f0xx_it.c ****   */
  84:Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  85:Src/stm32f0xx_it.c **** {
  45              		.loc 1 85 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE41:
  56 0002 C046     		.section	.text.SVC_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	SVC_Handler
  59              		.code	16
  60              		.thumb_func
  62              	SVC_Handler:
  63              	.LFB48:
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              		@ sp needed
  69 0000 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE48:
  73 0002 C046     		.section	.text.PendSV_Handler,"ax",%progbits
  74              		.align	2
  75              		.global	PendSV_Handler
  76              		.code	16
  77              		.thumb_func
  79              	PendSV_Handler:
  80              	.LFB43:
  86:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  87:Src/stm32f0xx_it.c **** 
  88:Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  89:Src/stm32f0xx_it.c ****   while (1)
  90:Src/stm32f0xx_it.c ****   {
  91:Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  92:Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  93:Src/stm32f0xx_it.c ****   }
  94:Src/stm32f0xx_it.c **** }
  95:Src/stm32f0xx_it.c **** 
  96:Src/stm32f0xx_it.c **** /**
  97:Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
  98:Src/stm32f0xx_it.c ****   */
ARM GAS  /tmp/ccbKJdUK.s 			page 4


  99:Src/stm32f0xx_it.c **** void SVC_Handler(void)
 100:Src/stm32f0xx_it.c **** {
 101:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 102:Src/stm32f0xx_it.c **** 
 103:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 104:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 105:Src/stm32f0xx_it.c **** 
 106:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 107:Src/stm32f0xx_it.c **** }
 108:Src/stm32f0xx_it.c **** 
 109:Src/stm32f0xx_it.c **** /**
 110:Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 111:Src/stm32f0xx_it.c ****   */
 112:Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 113:Src/stm32f0xx_it.c **** {
  81              		.loc 1 113 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
 114:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 115:Src/stm32f0xx_it.c **** 
 116:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 117:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 118:Src/stm32f0xx_it.c **** 
 119:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 120:Src/stm32f0xx_it.c **** }
  86              		.loc 1 120 0
  87              		@ sp needed
  88 0000 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE43:
  92 0002 C046     		.section	.text.SysTick_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	SysTick_Handler
  95              		.code	16
  96              		.thumb_func
  98              	SysTick_Handler:
  99              	.LFB44:
 121:Src/stm32f0xx_it.c **** 
 122:Src/stm32f0xx_it.c **** /**
 123:Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 124:Src/stm32f0xx_it.c ****   */
 125:Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 126:Src/stm32f0xx_it.c **** {
 100              		.loc 1 126 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104 0000 10B5     		push	{r4, lr}
 105              	.LCFI0:
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 4, -8
 108              		.cfi_offset 14, -4
 127:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 128:Src/stm32f0xx_it.c **** 
 129:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
ARM GAS  /tmp/ccbKJdUK.s 			page 5


 130:Src/stm32f0xx_it.c ****   HAL_IncTick();
 109              		.loc 1 130 0
 110 0002 FFF7FEFF 		bl	HAL_IncTick
 111              	.LVL0:
 131:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 132:Src/stm32f0xx_it.c **** 
 133:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 134:Src/stm32f0xx_it.c **** }
 112              		.loc 1 134 0
 113              		@ sp needed
 114 0006 10BD     		pop	{r4, pc}
 115              		.cfi_endproc
 116              	.LFE44:
 118              		.section	.text.CEC_CAN_IRQHandler,"ax",%progbits
 119              		.align	2
 120              		.global	CEC_CAN_IRQHandler
 121              		.code	16
 122              		.thumb_func
 124              	CEC_CAN_IRQHandler:
 125              	.LFB45:
 135:Src/stm32f0xx_it.c **** 
 136:Src/stm32f0xx_it.c **** /******************************************************************************/
 137:Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 138:Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 139:Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 140:Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 141:Src/stm32f0xx_it.c **** /******************************************************************************/
 142:Src/stm32f0xx_it.c **** 
 143:Src/stm32f0xx_it.c **** /**
 144:Src/stm32f0xx_it.c ****   * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt th
 145:Src/stm32f0xx_it.c ****   */
 146:Src/stm32f0xx_it.c **** void CEC_CAN_IRQHandler(void)
 147:Src/stm32f0xx_it.c **** {
 126              		.loc 1 147 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0000 10B5     		push	{r4, lr}
 131              	.LCFI1:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
 148:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN CEC_CAN_IRQn 0 */
 149:Src/stm32f0xx_it.c **** 
 150:Src/stm32f0xx_it.c ****   /* USER CODE END CEC_CAN_IRQn 0 */
 151:Src/stm32f0xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 135              		.loc 1 151 0
 136 0002 0248     		ldr	r0, .L8
 137 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 138              	.LVL1:
 152:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN CEC_CAN_IRQn 1 */
 153:Src/stm32f0xx_it.c **** 
 154:Src/stm32f0xx_it.c ****   /* USER CODE END CEC_CAN_IRQn 1 */
 155:Src/stm32f0xx_it.c **** }
 139              		.loc 1 155 0
 140              		@ sp needed
 141 0008 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccbKJdUK.s 			page 6


 142              	.L9:
 143 000a C046     		.align	2
 144              	.L8:
 145 000c 00000000 		.word	hcan
 146              		.cfi_endproc
 147              	.LFE45:
 149              		.section	.text.USB_IRQHandler,"ax",%progbits
 150              		.align	2
 151              		.global	USB_IRQHandler
 152              		.code	16
 153              		.thumb_func
 155              	USB_IRQHandler:
 156              	.LFB46:
 156:Src/stm32f0xx_it.c **** 
 157:Src/stm32f0xx_it.c **** /**
 158:Src/stm32f0xx_it.c ****   * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
 159:Src/stm32f0xx_it.c ****   */
 160:Src/stm32f0xx_it.c **** void USB_IRQHandler(void)
 161:Src/stm32f0xx_it.c **** {
 157              		.loc 1 161 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161 0000 10B5     		push	{r4, lr}
 162              	.LCFI2:
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 4, -8
 165              		.cfi_offset 14, -4
 162:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 0 */
 163:Src/stm32f0xx_it.c **** 
 164:Src/stm32f0xx_it.c ****   /* USER CODE END USB_IRQn 0 */
 165:Src/stm32f0xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 166              		.loc 1 165 0
 167 0002 0248     		ldr	r0, .L11
 168 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 169              	.LVL2:
 166:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 1 */
 167:Src/stm32f0xx_it.c **** 
 168:Src/stm32f0xx_it.c ****   /* USER CODE END USB_IRQn 1 */
 169:Src/stm32f0xx_it.c **** }
 170              		.loc 1 169 0
 171              		@ sp needed
 172 0008 10BD     		pop	{r4, pc}
 173              	.L12:
 174 000a C046     		.align	2
 175              	.L11:
 176 000c 00000000 		.word	hpcd_USB_FS
 177              		.cfi_endproc
 178              	.LFE46:
 180              		.text
 181              	.Letext0:
 182              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 183              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 184              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 185              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 186              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 187              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_can.h"
ARM GAS  /tmp/ccbKJdUK.s 			page 7


 188              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 189              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 190              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccbKJdUK.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_it.c
     /tmp/ccbKJdUK.s:20     .text.NMI_Handler:00000000 $t
     /tmp/ccbKJdUK.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccbKJdUK.s:37     .text.HardFault_Handler:00000000 $t
     /tmp/ccbKJdUK.s:42     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccbKJdUK.s:57     .text.SVC_Handler:00000000 $t
     /tmp/ccbKJdUK.s:62     .text.SVC_Handler:00000000 SVC_Handler
     /tmp/ccbKJdUK.s:74     .text.PendSV_Handler:00000000 $t
     /tmp/ccbKJdUK.s:79     .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/ccbKJdUK.s:93     .text.SysTick_Handler:00000000 $t
     /tmp/ccbKJdUK.s:98     .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccbKJdUK.s:119    .text.CEC_CAN_IRQHandler:00000000 $t
     /tmp/ccbKJdUK.s:124    .text.CEC_CAN_IRQHandler:00000000 CEC_CAN_IRQHandler
     /tmp/ccbKJdUK.s:145    .text.CEC_CAN_IRQHandler:0000000c $d
     /tmp/ccbKJdUK.s:150    .text.USB_IRQHandler:00000000 $t
     /tmp/ccbKJdUK.s:155    .text.USB_IRQHandler:00000000 USB_IRQHandler
     /tmp/ccbKJdUK.s:176    .text.USB_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_CAN_IRQHandler
hcan
HAL_PCD_IRQHandler
hpcd_USB_FS
